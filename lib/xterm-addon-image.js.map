{"version":3,"file":"xterm-addon-image.js","mappings":"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","sources":["webpack://ImageAddon/webpack/universalModuleDefinition","webpack://ImageAddon/./node_modules/inwasm/lib/index.js","webpack://ImageAddon/./node_modules/sixel/lib/Colors.js","webpack://ImageAddon/./node_modules/sixel/lib/Decoder.js","webpack://ImageAddon/./node_modules/sixel/lib/wasm.js","webpack://ImageAddon/./src/IIPHandler.ts","webpack://ImageAddon/./src/IIPHeaderParser.ts","webpack://ImageAddon/./src/IIPMetrics.ts","webpack://ImageAddon/./src/ImageRenderer.ts","webpack://ImageAddon/./src/ImageStorage.ts","webpack://ImageAddon/./src/SixelHandler.ts","webpack://ImageAddon/./src/base64.wasm.ts","webpack://ImageAddon/webpack/bootstrap","webpack://ImageAddon/./src/ImageAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ImageAddon\"] = factory();\n\telse\n\t\troot[\"ImageAddon\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InWasm = void 0;\n// runtime helper - decode base64\nfunction _dec(s) {\n    if (typeof Buffer !== 'undefined')\n        return Buffer.from(s, 'base64');\n    const bs = atob(s);\n    const r = new Uint8Array(bs.length);\n    for (let i = 0; i < r.length; ++i)\n        r[i] = bs.charCodeAt(i);\n    return r;\n}\nfunction InWasm(def) {\n    if (def.d) {\n        // default compiled call: wasm loading during runtime\n        // for the sake of small bundling size (<900 bytes) the code is somewhat degenerated\n        // see cli.ts for the meaning of the {t, s, d, e} object properties\n        const { t, s, d } = def;\n        // memorize bytes and module\n        let bytes;\n        let mod;\n        const W = WebAssembly;\n        if (t === 2 /* OutputType.BYTES */) {\n            if (s)\n                return () => bytes || (bytes = _dec(d));\n            return () => Promise.resolve(bytes || (bytes = _dec(d)));\n        }\n        if (t === 1 /* OutputType.MODULE */) {\n            if (s)\n                return () => mod || (mod = new W.Module(bytes || (bytes = _dec(d))));\n            return () => mod\n                ? Promise.resolve(mod)\n                : W.compile(bytes || (bytes = _dec(d))).then(m => mod = m);\n        }\n        if (s)\n            return (e) => new W.Instance(mod || (mod = new W.Module(bytes || (bytes = _dec(d)))), e);\n        return (e) => mod\n            ? W.instantiate(mod, e)\n            : W.instantiate(bytes || (bytes = _dec(d)), e).then(r => (mod = r.module) && r.instance);\n    }\n    // invalid call: uncompiled normal run throws\n    if (typeof _wasmCtx === 'undefined')\n        throw new Error('must run \"inwasm\"');\n    _wasmCtx.add(def);\n}\nexports.InWasm = InWasm;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * Copyright (c) 2019 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FOREGROUND = exports.DEFAULT_BACKGROUND = exports.PALETTE_ANSI_256 = exports.PALETTE_VT340_GREY = exports.PALETTE_VT340_COLOR = exports.normalizeHLS = exports.normalizeRGB = exports.nearestColorIndex = exports.fromRGBA8888 = exports.toRGBA8888 = exports.alpha = exports.blue = exports.green = exports.red = exports.BIG_ENDIAN = void 0;\n// FIXME: cleanup this mess, move things either to decoder/encoder, keep only shared things\n// system endianess\nexports.BIG_ENDIAN = new Uint8Array(new Uint32Array([0xFF000000]).buffer)[0] === 0xFF;\nif (exports.BIG_ENDIAN) {\n    console.warn('BE platform detected. This version of node-sixel works only on LE properly.');\n}\n// channel values\nfunction red(n) {\n    return n & 0xFF;\n}\nexports.red = red;\nfunction green(n) {\n    return (n >>> 8) & 0xFF;\n}\nexports.green = green;\nfunction blue(n) {\n    return (n >>> 16) & 0xFF;\n}\nexports.blue = blue;\nfunction alpha(n) {\n    return (n >>> 24) & 0xFF;\n}\nexports.alpha = alpha;\n/**\n * Convert RGB channels to native color RGBA8888.\n */\nfunction toRGBA8888(r, g, b, a = 255) {\n    return ((a & 0xFF) << 24 | (b & 0xFF) << 16 | (g & 0xFF) << 8 | (r & 0xFF)) >>> 0; // ABGR32\n}\nexports.toRGBA8888 = toRGBA8888;\n/**\n * Convert native color to [r, g, b, a].\n */\nfunction fromRGBA8888(color) {\n    return [color & 0xFF, (color >> 8) & 0xFF, (color >> 16) & 0xFF, color >>> 24];\n}\nexports.fromRGBA8888 = fromRGBA8888;\n/**\n * Get index of nearest color in `palette` for `color`.\n * Uses euclidean distance without any luminescence correction.\n */\nfunction nearestColorIndex(color, palette) {\n    const r = red(color);\n    const g = green(color);\n    const b = blue(color);\n    let min = Number.MAX_SAFE_INTEGER;\n    let idx = -1;\n    // use euclidean distance (manhattan gives very poor results)\n    for (let i = 0; i < palette.length; ++i) {\n        const dr = r - palette[i][0];\n        const dg = g - palette[i][1];\n        const db = b - palette[i][2];\n        const d = dr * dr + dg * dg + db * db;\n        if (!d)\n            return i;\n        if (d < min) {\n            min = d;\n            idx = i;\n        }\n    }\n    return idx;\n}\nexports.nearestColorIndex = nearestColorIndex;\n// color conversions\n// HLS taken from: http://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl\nfunction clamp(low, high, value) {\n    return Math.max(low, Math.min(value, high));\n}\nfunction h2c(t1, t2, c) {\n    if (c < 0)\n        c += 1;\n    if (c > 1)\n        c -= 1;\n    return c * 6 < 1\n        ? t2 + (t1 - t2) * 6 * c\n        : c * 2 < 1\n            ? t1\n            : c * 3 < 2\n                ? t2 + (t1 - t2) * (4 - c * 6)\n                : t2;\n}\nfunction HLStoRGB(h, l, s) {\n    if (!s) {\n        const v = Math.round(l * 255);\n        return toRGBA8888(v, v, v);\n    }\n    const t1 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const t2 = 2 * l - t1;\n    return toRGBA8888(clamp(0, 255, Math.round(h2c(t1, t2, h + 1 / 3) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h) * 255)), clamp(0, 255, Math.round(h2c(t1, t2, h - 1 / 3) * 255)));\n}\n/**\n * Normalize SIXEL RGB values (percent based, 0-100) to RGBA8888.\n */\nfunction normalizeRGB(r, g, b) {\n    return (0xFF000000 | Math.round(b / 100 * 255) << 16 | Math.round(g / 100 * 255) << 8 | Math.round(r / 100 * 255)) >>> 0; // ABGR32\n}\nexports.normalizeRGB = normalizeRGB;\n/**\n * Normalize SIXEL HLS values to RGBA8888. Applies hue correction of +240°.\n */\nfunction normalizeHLS(h, l, s) {\n    // Note: hue value is turned by 240° in VT340, all values given as fractions\n    return HLStoRGB((h + 240 % 360) / 360, l / 100, s / 100);\n}\nexports.normalizeHLS = normalizeHLS;\n/**\n * default palettes\n */\n// FIXME: move palettes to Decoder.ts\n/**\n * 16 predefined color registers of VT340 (values in %):\n * ```\n *                R   G   B\n * 0  Black       0   0   0\n * 1  Blue        20  20  80\n * 2  Red         80  13  13\n * 3  Green       20  80  20\n * 4  Magenta     80  20  80\n * 5  Cyan        20  80  80\n * 6  Yellow      80  80  20\n * 7  Gray 50%    53  53  53\n * 8  Gray 25%    26  26  26\n * 9  Blue*       33  33  60\n * 10 Red*        60  26  26\n * 11 Green*      33  60  33\n * 12 Magenta*    60  33  60\n * 13 Cyan*       33  60  60\n * 14 Yellow*     60  60  33\n * 15 Gray 75%    80  80  80\n * ```\n * (*) less saturated\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n*/\nexports.PALETTE_VT340_COLOR = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(20, 20, 80),\n    normalizeRGB(80, 13, 13),\n    normalizeRGB(20, 80, 20),\n    normalizeRGB(80, 20, 80),\n    normalizeRGB(20, 80, 80),\n    normalizeRGB(80, 80, 20),\n    normalizeRGB(53, 53, 53),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(33, 33, 60),\n    normalizeRGB(60, 26, 26),\n    normalizeRGB(33, 60, 33),\n    normalizeRGB(60, 33, 60),\n    normalizeRGB(33, 60, 60),\n    normalizeRGB(60, 60, 33),\n    normalizeRGB(80, 80, 80)\n]);\n/**\n * 16 predefined monochrome registers of VT340 (values in %):\n * ```\n *              R   G   B\n * 0  Black     0   0   0\n * 1  Gray-2    13  13  13\n * 2  Gray-4    26  26  26\n * 3  Gray-6    40  40  40\n * 4  Gray-1    6   6   6\n * 5  Gray-3    20  20  20\n * 6  Gray-5    33  33  33\n * 7  White 7   46  46  46\n * 8  Black 0   0   0   0\n * 9  Gray-2    13  13  13\n * 10 Gray-4    26  26  26\n * 11 Gray-6    40  40  40\n * 12 Gray-1    6   6   6\n * 13 Gray-3    20  20  20\n * 14 Gray-5    33  33  33\n * 15 White 7   46  46  46\n * ```\n *\n * @see https://vt100.net/docs/vt3xx-gp/chapter2.html#S2.4\n */\nexports.PALETTE_VT340_GREY = new Uint32Array([\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46),\n    normalizeRGB(0, 0, 0),\n    normalizeRGB(13, 13, 13),\n    normalizeRGB(26, 26, 26),\n    normalizeRGB(40, 40, 40),\n    normalizeRGB(6, 6, 6),\n    normalizeRGB(20, 20, 20),\n    normalizeRGB(33, 33, 33),\n    normalizeRGB(46, 46, 46)\n]);\n/**\n * 256 predefined ANSI colors.\n *\n * @see https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n */\nexports.PALETTE_ANSI_256 = (() => {\n    // 16 lower colors (taken from xterm)\n    const p = [\n        toRGBA8888(0, 0, 0),\n        toRGBA8888(205, 0, 0),\n        toRGBA8888(0, 205, 0),\n        toRGBA8888(205, 205, 0),\n        toRGBA8888(0, 0, 238),\n        toRGBA8888(205, 0, 205),\n        toRGBA8888(0, 250, 205),\n        toRGBA8888(229, 229, 229),\n        toRGBA8888(127, 127, 127),\n        toRGBA8888(255, 0, 0),\n        toRGBA8888(0, 255, 0),\n        toRGBA8888(255, 255, 0),\n        toRGBA8888(92, 92, 255),\n        toRGBA8888(255, 0, 255),\n        toRGBA8888(0, 255, 255),\n        toRGBA8888(255, 255, 255),\n    ];\n    // colors up to 232\n    const d = [0, 95, 135, 175, 215, 255];\n    for (let r = 0; r < 6; ++r) {\n        for (let g = 0; g < 6; ++g) {\n            for (let b = 0; b < 6; ++b) {\n                p.push(toRGBA8888(d[r], d[g], d[b]));\n            }\n        }\n    }\n    // grey scale to up 255\n    for (let v = 8; v <= 238; v += 10) {\n        p.push(toRGBA8888(v, v, v));\n    }\n    return new Uint32Array(p);\n})();\n/**\n * Background: Black by default.\n * Foreground: White by default.\n *\n * Background color is used whenever a fill color is needed and not explicitly set.\n * Foreground color is used as default initial sixel color.\n */\nexports.DEFAULT_BACKGROUND = toRGBA8888(0, 0, 0, 255);\nexports.DEFAULT_FOREGROUND = toRGBA8888(255, 255, 255, 255);\n//# sourceMappingURL=Colors.js.map","\"use strict\";\n/**\n * Copyright (c) 2021 Joerg Breitbart.\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeAsync = exports.decode = exports.Decoder = exports.DecoderAsync = void 0;\nconst Colors_1 = require(\"./Colors\");\nconst wasm_1 = require(\"./wasm\");\n/* istanbul ignore next */\nfunction decodeBase64(s) {\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(s, 'base64');\n    }\n    const bytestring = atob(s);\n    const result = new Uint8Array(bytestring.length);\n    for (let i = 0; i < result.length; ++i) {\n        result[i] = bytestring.charCodeAt(i);\n    }\n    return result;\n}\nconst WASM_BYTES = decodeBase64(wasm_1.LIMITS.BYTES);\nlet WASM_MODULE;\n// empty canvas\nconst NULL_CANVAS = new Uint32Array();\n// proxy for lazy binding of decoder methods to wasm env callbacks\nclass CallbackProxy {\n    constructor() {\n        this.bandHandler = (width) => 1;\n        this.modeHandler = (mode) => 1;\n    }\n    handle_band(width) {\n        return this.bandHandler(width);\n    }\n    mode_parsed(mode) {\n        return this.modeHandler(mode);\n    }\n}\n// default decoder options\nconst DEFAULT_OPTIONS = {\n    memoryLimit: 2048 * 65536,\n    sixelColor: Colors_1.DEFAULT_FOREGROUND,\n    fillColor: Colors_1.DEFAULT_BACKGROUND,\n    palette: Colors_1.PALETTE_VT340_COLOR,\n    paletteLimit: wasm_1.LIMITS.PALETTE_SIZE,\n    truncate: true\n};\n/**\n * Create a decoder instance asynchronously.\n * To be used in the browser main thread.\n */\nfunction DecoderAsync(opts) {\n    const cbProxy = new CallbackProxy();\n    const importObj = {\n        env: {\n            handle_band: cbProxy.handle_band.bind(cbProxy),\n            mode_parsed: cbProxy.mode_parsed.bind(cbProxy)\n        }\n    };\n    return WebAssembly.instantiate(WASM_MODULE || WASM_BYTES, importObj)\n        .then((inst) => {\n        WASM_MODULE = WASM_MODULE || inst.module;\n        return new Decoder(opts, inst.instance || inst, cbProxy);\n    });\n}\nexports.DecoderAsync = DecoderAsync;\n/**\n * Decoder - web assembly based sixel stream decoder.\n *\n * Usage pattern:\n *  - call `init` to initialize decoder for new image\n *  - feed data chunks to `decode` or `decodeString`\n *  - grab pixels from `data32`\n *  - optional: call `release` to free memory (e.g. after big images)\n *  - start over with next image by calling `init`\n *\n * Properties:\n *  - max width of 2^14 - 4 pixels (compile time setting in wasm)\n *  - no explicit height limit (only limited by memory)\n *  - max 4096 colors palette (compile time setting in wasm)\n *\n * Explanation operation modes:\n * - M1   Mode chosen for level 1 images (no raster attributes),\n *        or for level 2 images with `truncate=false`.\n * - M2   Mode chosen for level 2 images with `truncate=true` (default).\n *        While this mode is not fully spec conform (decoder not expected to truncate),\n *        it is what spec conform encoders should create (should not excess raster).\n *        This mode has several advantages:\n *        - ~15% faster decoding speed\n *        - image dimensions can be evaluated early without processing the whole data\n *        - faster pixel access in `data32` (precalulated)\n *        - image height is not reported as multiple of 6 pixels\n * - M0   Undecided mode state after `init`.\n * The level of an image is determined during early decoding based on the fact,\n * whether the data contains valid raster attributes before any sixel data.\n * Until then the mode of an image is marked as M0, meaning the real operation mode\n * could not be decided yet.\n */\nclass Decoder {\n    /**\n     * Synchonous ctor. Can be called from nodejs or a webworker context.\n     * For instantiation in the browser main thread use `WasmDecoderAsync` instead.\n     */\n    constructor(opts, _instance, _cbProxy) {\n        this._PIXEL_OFFSET = wasm_1.LIMITS.MAX_WIDTH + 4;\n        this._canvas = NULL_CANVAS;\n        this._bandWidths = [];\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n        this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n        if (this._opts.paletteLimit > wasm_1.LIMITS.PALETTE_SIZE) {\n            throw new Error(`DecoderOptions.paletteLimit must not exceed ${wasm_1.LIMITS.PALETTE_SIZE}`);\n        }\n        if (!_instance) {\n            const module = WASM_MODULE || (WASM_MODULE = new WebAssembly.Module(WASM_BYTES));\n            _instance = new WebAssembly.Instance(module, {\n                env: {\n                    handle_band: this._handle_band.bind(this),\n                    mode_parsed: this._initCanvas.bind(this)\n                }\n            });\n        }\n        else {\n            _cbProxy.bandHandler = this._handle_band.bind(this);\n            _cbProxy.modeHandler = this._initCanvas.bind(this);\n        }\n        this._instance = _instance;\n        this._wasm = this._instance.exports;\n        this._chunk = new Uint8Array(this._wasm.memory.buffer, this._wasm.get_chunk_address(), wasm_1.LIMITS.CHUNK_SIZE);\n        this._states = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_state_address(), 12);\n        this._palette = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_palette_address(), wasm_1.LIMITS.PALETTE_SIZE);\n        this._palette.set(this._opts.palette);\n        this._pSrc = new Uint32Array(this._wasm.memory.buffer, this._wasm.get_p0_address());\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n    // some readonly parser states for internal usage\n    get _fillColor() { return this._states[0]; }\n    get _truncate() { return this._states[8]; }\n    get _rasterWidth() { return this._states[6]; }\n    get _rasterHeight() { return this._states[7]; }\n    get _width() { return this._states[2] ? this._states[2] - 4 : 0; }\n    get _height() { return this._states[3]; }\n    get _level() { return this._states[9]; }\n    get _mode() { return this._states[10]; }\n    get _paletteLimit() { return this._states[11]; }\n    _initCanvas(mode) {\n        if (mode === 2 /* M2 */) {\n            const pixels = this.width * this.height;\n            if (pixels > this._canvas.length) {\n                if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                    this.release();\n                    throw new Error('image exceeds memory limit');\n                }\n                this._canvas = new Uint32Array(pixels);\n            }\n            this._maxWidth = this._width;\n        }\n        else if (mode === 1 /* M1 */) {\n            if (this._level === 2) {\n                // got raster attributes, use them as initial size hint\n                const pixels = Math.min(this._rasterWidth, wasm_1.LIMITS.MAX_WIDTH) * this._rasterHeight;\n                if (pixels > this._canvas.length) {\n                    if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                        this.release();\n                        throw new Error('image exceeds memory limit');\n                    }\n                    this._canvas = new Uint32Array(pixels);\n                }\n            }\n            else {\n                // else fallback to generic resizing, starting with 256*256 pixels\n                if (this._canvas.length < 65536) {\n                    this._canvas = new Uint32Array(65536);\n                }\n            }\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    _realloc(offset, additionalPixels) {\n        const pixels = offset + additionalPixels;\n        if (pixels > this._canvas.length) {\n            if (this._opts.memoryLimit && pixels * 4 > this._opts.memoryLimit) {\n                this.release();\n                throw new Error('image exceeds memory limit');\n            }\n            // extend in 65536 pixel blocks\n            const newCanvas = new Uint32Array(Math.ceil(pixels / 65536) * 65536);\n            newCanvas.set(this._canvas);\n            this._canvas = newCanvas;\n        }\n    }\n    _handle_band(width) {\n        const adv = this._PIXEL_OFFSET;\n        let offset = this._lastOffset;\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            let c = 0;\n            while (c < 6 && remaining > 0) {\n                this._canvas.set(this._pSrc.subarray(adv * c, adv * c + width), offset + width * c);\n                c++;\n                remaining--;\n            }\n            this._lastOffset += width * c;\n            this._currentHeight += c;\n        }\n        else if (this._mode === 1 /* M1 */) {\n            this._realloc(offset, width * 6);\n            this._maxWidth = Math.max(this._maxWidth, width);\n            this._minWidth = Math.min(this._minWidth, width);\n            for (let i = 0; i < 6; ++i) {\n                this._canvas.set(this._pSrc.subarray(adv * i, adv * i + width), offset + width * i);\n            }\n            this._bandWidths.push(width);\n            this._lastOffset += width * 6;\n            this._currentHeight += 6;\n        }\n        return 0; // 0 - continue, 1 - abort right away\n    }\n    /**\n     * Width of the image data.\n     * Returns the rasterWidth in level2/truncating mode,\n     * otherwise the max width, that has been seen so far.\n     */\n    get width() {\n        return this._mode !== 1 /* M1 */\n            ? this._width\n            : Math.max(this._maxWidth, this._wasm.current_width());\n    }\n    /**\n     * Height of the image data.\n     * Returns the rasterHeight in level2/truncating mode,\n     * otherwise height touched by sixels.\n     */\n    get height() {\n        return this._mode !== 1 /* M1 */\n            ? this._height\n            : this._wasm.current_width()\n                ? this._bandWidths.length * 6 + this._wasm.current_height()\n                : this._bandWidths.length * 6;\n    }\n    /**\n     * Get active palette colors as RGBA8888[] (borrowed).\n     */\n    get palette() {\n        return this._palette.subarray(0, this._paletteLimit);\n    }\n    /**\n     * Get the memory used by the decoder.\n     *\n     * This is a rough estimate accounting the wasm instance memory\n     * and pixel buffers held on JS side (real value will be slightly\n     * higher due to JS book-keeping).\n     * Note that the decoder does not free ressources on its own,\n     * call `release` to free excess memory.\n     */\n    get memoryUsage() {\n        return this._canvas.byteLength + this._wasm.memory.buffer.byteLength + 8 * this._bandWidths.length;\n    }\n    /**\n     * Get various properties of the decoder and the current image.\n     */\n    get properties() {\n        return {\n            width: this.width,\n            height: this.height,\n            mode: this._mode,\n            level: this._level,\n            truncate: !!this._truncate,\n            paletteLimit: this._paletteLimit,\n            fillColor: this._fillColor,\n            memUsage: this.memoryUsage,\n            rasterAttributes: {\n                numerator: this._states[4],\n                denominator: this._states[5],\n                width: this._rasterWidth,\n                height: this._rasterHeight,\n            }\n        };\n    }\n    /**\n     * Initialize decoder for next image. Must be called before\n     * any calls to `decode` or `decodeString`.\n     */\n    // FIXME: reorder arguments, better palette handling\n    init(fillColor = this._opts.fillColor, palette = this._opts.palette, paletteLimit = this._opts.paletteLimit, truncate = this._opts.truncate) {\n        this._wasm.init(this._opts.sixelColor, fillColor, paletteLimit, truncate ? 1 : 0);\n        if (palette) {\n            this._palette.set(palette.subarray(0, wasm_1.LIMITS.PALETTE_SIZE));\n        }\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        this._lastOffset = 0;\n        this._currentHeight = 0;\n    }\n    /**\n     * Decode next chunk of data from start to end index (exclusive).\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decode(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            this._chunk.set(data.subarray(p, p += length));\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Decode next chunk of string data from start to end index (exclusive).\n     * Note: Decoding from string data is rather slow, use `decode` with byte data instead.\n     * @throws Will throw if the image exceeds the memory limit.\n     */\n    decodeString(data, start = 0, end = data.length) {\n        let p = start;\n        while (p < end) {\n            const length = Math.min(end - p, wasm_1.LIMITS.CHUNK_SIZE);\n            for (let i = 0, j = p; i < length; ++i, ++j) {\n                this._chunk[i] = data.charCodeAt(j);\n            }\n            p += length;\n            this._wasm.decode(0, length);\n        }\n    }\n    /**\n     * Get current pixel data as 32-bit typed array (RGBA8888).\n     * Also peeks into pixel data of the current band, that got not pushed yet.\n     */\n    get data32() {\n        if (this._mode === 0 /* M0 */ || !this.width || !this.height) {\n            return NULL_CANVAS;\n        }\n        // get width of pending band to peek into left-over data\n        const currentWidth = this._wasm.current_width();\n        if (this._mode === 2 /* M2 */) {\n            let remaining = this.height - this._currentHeight;\n            if (remaining > 0) {\n                const adv = this._PIXEL_OFFSET;\n                let offset = this._lastOffset;\n                let c = 0;\n                while (c < 6 && remaining > 0) {\n                    this._canvas.set(this._pSrc.subarray(adv * c, adv * c + currentWidth), offset + currentWidth * c);\n                    c++;\n                    remaining--;\n                }\n                if (remaining) {\n                    this._canvas.fill(this._fillColor, offset + currentWidth * c);\n                }\n            }\n            return this._canvas.subarray(0, this.width * this.height);\n        }\n        if (this._mode === 1 /* M1 */) {\n            if (this._minWidth === this._maxWidth) {\n                let escape = false;\n                if (currentWidth) {\n                    if (currentWidth !== this._minWidth) {\n                        escape = true;\n                    }\n                    else {\n                        const adv = this._PIXEL_OFFSET;\n                        let offset = this._lastOffset;\n                        this._realloc(offset, currentWidth * 6);\n                        for (let i = 0; i < 6; ++i) {\n                            this._canvas.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), offset + currentWidth * i);\n                        }\n                    }\n                }\n                if (!escape) {\n                    return this._canvas.subarray(0, this.width * this.height);\n                }\n            }\n            // worst case: re-align pixels if we have bands with different width\n            // This is somewhat allocation intensive, any way to do that in-place, and just once?\n            const final = new Uint32Array(this.width * this.height);\n            final.fill(this._fillColor);\n            let finalOffset = 0;\n            let start = 0;\n            for (let i = 0; i < this._bandWidths.length; ++i) {\n                const bw = this._bandWidths[i];\n                for (let p = 0; p < 6; ++p) {\n                    final.set(this._canvas.subarray(start, start += bw), finalOffset);\n                    finalOffset += this.width;\n                }\n            }\n            // also handle left-over pixels of the current band\n            if (currentWidth) {\n                const adv = this._PIXEL_OFFSET;\n                // other than finished bands, this runs only up to currentHeight\n                const currentHeight = this._wasm.current_height();\n                for (let i = 0; i < currentHeight; ++i) {\n                    final.set(this._pSrc.subarray(adv * i, adv * i + currentWidth), finalOffset + this.width * i);\n                }\n            }\n            return final;\n        }\n        // fallthrough for all not handled cases\n        return NULL_CANVAS;\n    }\n    /**\n     * Same as `data32`, but returning pixel data as Uint8ClampedArray suitable\n     * for direct usage with `ImageData`.\n     */\n    get data8() {\n        return new Uint8ClampedArray(this.data32.buffer, 0, this.width * this.height * 4);\n    }\n    /**\n     * Release image ressources on JS side held by the decoder.\n     *\n     * The decoder tries to re-use memory ressources of a previous image\n     * to lower allocation and GC pressure. Decoding a single big image\n     * will grow the memory usage of the decoder permanently.\n     * Call `release` to reset the internal buffers and free the memory.\n     * Note that this destroys the image data, call it when done processing\n     * a rather big image, otherwise it is not needed. Use `memoryUsage`\n     * to decide, whether the held memory is still within your limits.\n     * This does not affect the wasm module (operates on static memory).\n     */\n    release() {\n        this._canvas = NULL_CANVAS;\n        this._bandWidths.length = 0;\n        this._maxWidth = 0;\n        this._minWidth = wasm_1.LIMITS.MAX_WIDTH;\n        // also nullify parser states in wasm to avoid\n        // width/height reporting potential out-of-bound values\n        this._wasm.init(Colors_1.DEFAULT_FOREGROUND, 0, this._opts.paletteLimit, 0);\n    }\n}\nexports.Decoder = Decoder;\n/**\n * Convenient decoding functions for easier usage.\n *\n * These can be used for casual decoding of sixel images,\n * that dont come in as stream chunks.\n * Note that the functions instantiate a stream decoder for every call,\n * which comes with a performance penalty of ~25%.\n */\n/**\n * Decode function with synchronous wasm loading.\n * Can be used in a web worker or in nodejs. Does not work reliable in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nfunction decode(data, opts) {\n    const dec = new Decoder(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decode = decode;\n/**\n * Decode function with asynchronous wasm loading.\n * Use this version in normal browser context.\n * @throws Will throw if the image exceeds the memory limit.\n */\nasync function decodeAsync(data, opts) {\n    const dec = await DecoderAsync(opts);\n    dec.init();\n    typeof data === 'string' ? dec.decodeString(data) : dec.decode(data);\n    return {\n        width: dec.width,\n        height: dec.height,\n        data32: dec.data32,\n        data8: dec.data8\n    };\n}\nexports.decodeAsync = decodeAsync;\n//# sourceMappingURL=Decoder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LIMITS = void 0;\nexports.LIMITS = {\n    CHUNK_SIZE: 16384,\n    PALETTE_SIZE: 4096,\n    MAX_WIDTH: 16384,\n    BYTES: ''\n};\n//# sourceMappingURL=wasm.js.map","/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IImageAddonOptions, IOscHandler, IResetHandler, ITerminalExt } from './Types';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ImageStorage, CELL_SIZE_DEFAULT } from './ImageStorage';\nimport { Base64Decoder } from './base64.wasm';\nimport { HeaderParser, IHeaderFields, HeaderState } from './IIPHeaderParser';\nimport { imageType, UNSUPPORTED_TYPE } from './IIPMetrics';\n\n\n// eslint-disable-next-line\ndeclare const Buffer: any;\n\n// limit hold memory in base64 decoder\nconst KEEP_DATA = 4194304;\n\n// default IIP header values\nconst DEFAULT_HEADER: IHeaderFields = {\n  name: 'Unnamed file',\n  size: 0,\n  width: 'auto',\n  height: 'auto',\n  preserveAspectRatio: 1,\n  inline: 0\n};\n\n\nexport class IIPHandler implements IOscHandler, IResetHandler {\n  private _aborted = false;\n  private _hp = new HeaderParser();\n  private _header: IHeaderFields = DEFAULT_HEADER;\n  private _dec = new Base64Decoder(KEEP_DATA);\n  private _metrics = UNSUPPORTED_TYPE;\n\n  constructor(\n    private readonly _opts: IImageAddonOptions,\n    private readonly _renderer: ImageRenderer,\n    private readonly _storage: ImageStorage,\n    private readonly _coreTerminal: ITerminalExt\n  ) {}\n\n  public reset(): void {}\n\n  public start(): void {\n    this._aborted = false;\n    this._header = DEFAULT_HEADER;\n    this._metrics  = UNSUPPORTED_TYPE;\n    this._hp.reset();\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._aborted) return;\n\n    if (this._hp.state === HeaderState.END) {\n      if (this._dec.put(data, start, end)) {\n        this._dec.release();\n        this._aborted = true;\n      }\n    } else {\n      const dataPos = this._hp.parse(data, start, end);\n      if (dataPos === -1) {\n        this._aborted = true;\n        return;\n      }\n      if (dataPos > 0) {\n        this._header = Object.assign({}, DEFAULT_HEADER, this._hp.fields);\n        if (!this._header.inline || !this._header.size || this._header.size > this._opts.iipSizeLimit) {\n          this._aborted = true;\n          return;\n        }\n        this._dec.init(this._header.size);\n        if (this._dec.put(data, dataPos, end)) {\n          this._dec.release();\n          this._aborted = true;\n        }\n      }\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    if (this._aborted) return true;\n\n    let w = 0;\n    let h = 0;\n\n    // early exit condition chain\n    let cond: number | boolean = true;\n    if (cond = success) {\n      if (cond = !this._dec.end()) {\n        this._metrics = imageType(this._dec.data8);\n        if (cond = this._metrics.mime !== 'unsupported') {\n          w = this._metrics.width;\n          h = this._metrics.height;\n          if (cond = w && h && w * h < this._opts.pixelLimit) {\n            [w, h] = this._resize(w, h).map(Math.floor);\n            cond = w && h && w * h < this._opts.pixelLimit;\n          }\n        }\n      }\n    }\n    if (!cond) {\n      this._dec.release();\n      return true;\n    }\n\n    const blob = new Blob([this._dec.data8], { type: this._metrics.mime });\n    this._dec.release();\n\n    if (!window.createImageBitmap) {\n      const url = URL.createObjectURL(blob);\n      const img = new Image();\n      return new Promise<boolean>(r => {\n        img.addEventListener('load', () => {\n          URL.revokeObjectURL(url);\n          const canvas = ImageRenderer.createCanvas(window.document, w, h);\n          canvas.getContext('2d')?.drawImage(img, 0, 0, w, h);\n          this._storage.addImage(canvas);\n          r(true);\n        });\n        img.src = url;\n        // sanity measure to avoid terminal blocking from dangling promise\n        // happens from corrupt data (onload never gets fired)\n        setTimeout(() => r(true), 1000);\n      });\n    }\n    return createImageBitmap(blob, { resizeWidth: w, resizeHeight: h })\n      .then(bm => {\n        this._storage.addImage(bm);\n        return true;\n      });\n  }\n\n  private _resize(w: number, h: number): [number, number] {\n    const cw = this._renderer.dimensions?.css.cell.width || CELL_SIZE_DEFAULT.width;\n    const ch = this._renderer.dimensions?.css.cell.height || CELL_SIZE_DEFAULT.height;\n    const width = this._renderer.dimensions?.css.canvas.width || cw * this._coreTerminal.cols;\n    const height = this._renderer.dimensions?.css.canvas.height || ch * this._coreTerminal.rows;\n\n    const rw = this._dim(this._header.width!, width, cw);\n    const rh = this._dim(this._header.height!, height, ch);\n    if (!rw && !rh) {\n      const wf = width / w;         // TODO: should this respect initial cursor offset?\n      const hf = (height - ch) / h; // TODO: fix offset issues from float cell height\n      const f = Math.min(wf, hf);\n      return f < 1 ? [w * f, h * f] : [w, h];\n    }\n    return !rw\n      ? [w * rh / h, rh]\n      : this._header.preserveAspectRatio || !rw || !rh\n        ? [rw, h * rw / w] : [rw, rh];\n  }\n\n  private _dim(s: string, total: number, cdim: number): number {\n    if (s === 'auto') return 0;\n    if (s.endsWith('%')) return parseInt(s.slice(0, -1)) * total / 100;\n    if (s.endsWith('px')) return parseInt(s.slice(0, -2));\n    return parseInt(s) * cdim;\n  }\n}\n","/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// eslint-disable-next-line\ndeclare const Buffer: any;\n\n\nexport interface IHeaderFields {\n  // base-64 encoded filename. Defaults to \"Unnamed file\".\n  name: string;\n  // File size in bytes. The file transfer will be canceled if this size is exceeded.\n  size: number;\n  /**\n   * Optional width and height to render:\n   * - N: N character cells.\n   * - Npx: N pixels.\n   * - N%: N percent of the session's width or height.\n   * - auto: The image's inherent size will be used to determine an appropriate dimension.\n   */\n  width?: string;\n  height?: string;\n  // Optional, defaults to 1 respecting aspect ratio (width takes precedence).\n  preserveAspectRatio?: number;\n  // Optional, defaults to 0. If set to 1, the file will be displayed inline, else downloaded (download not supported).\n  inline?: number;\n}\n\nexport const enum HeaderState {\n  START = 0,\n  ABORT = 1,\n  KEY = 2,\n  VALUE = 3,\n  END = 4\n}\n\n// field value decoders\n\n// ASCII bytes to string\nfunction toStr(data: Uint32Array): string {\n  let s = '';\n  for (let i = 0; i < data.length; ++i) {\n    s += String.fromCharCode(data[i]);\n  }\n  return s;\n}\n\n// digits to integer\nfunction toInt(data: Uint32Array): number {\n  let v = 0;\n  for (let i = 0; i < data.length; ++i) {\n    if (data[i] < 48 || data[i] > 57) {\n      throw new Error('illegal char');\n    }\n    v = v * 10 + data[i] - 48;\n  }\n  return v;\n}\n\n// check for correct size entry\nfunction toSize(data: Uint32Array): string {\n  const v = toStr(data);\n  if (!v.match(/^((auto)|(\\d+?((px)|(%)){0,1}))$/)) {\n    throw new Error('illegal size');\n  }\n  return v;\n}\n\n// name is base64 encoded utf-8\nfunction toName(data: Uint32Array): string {\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(toStr(data), 'base64').toString();\n  }\n  const bs = atob(toStr(data));\n  const b = new Uint8Array(bs.length);\n  for (let i = 0; i < b.length; ++i) {\n    b[i] = bs.charCodeAt(i);\n  }\n  return new TextDecoder().decode(b);\n}\n\nconst DECODERS: {[key: string]: (v: Uint32Array) => any} = {\n  inline: toInt,\n  size: toInt,\n  name: toName,\n  width: toSize,\n  height: toSize,\n  preserveAspectRatio: toInt\n};\n\n\nconst FILE_MARKER = [70, 105, 108, 101];\nconst MAX_FIELDCHARS = 1024;\n\n\nexport class HeaderParser {\n  public state: HeaderState = HeaderState.START;\n  private _buffer = new Uint32Array(MAX_FIELDCHARS);\n  private _position = 0;\n  private _key = '';\n  public fields: {[key: string]: any} = {};\n\n  public reset(): void {\n    this._buffer.fill(0);\n    this.state = HeaderState.START;\n    this._position = 0;\n    this.fields = {};\n    this._key = '';\n  }\n\n  public parse(data: Uint32Array, start: number, end: number): number {\n    let state = this.state;\n    let pos = this._position;\n    const buffer = this._buffer;\n    if (state === HeaderState.ABORT || state === HeaderState.END) return -1;\n    if (state === HeaderState.START && pos > 6) return -1;\n    for (let i = start; i < end; ++i) {\n      const c = data[i];\n      switch (c) {\n        case 59: // ;\n          if (!this._storeValue(pos)) return this._a();\n          state = HeaderState.KEY;\n          pos = 0;\n          break;\n        case 61: // =\n          if (state === HeaderState.START) {\n            for (let k = 0; k < FILE_MARKER.length; ++k) {\n              if (buffer[k] !== FILE_MARKER[k]) return this._a();\n            }\n            state = HeaderState.KEY;\n            pos = 0;\n          } else if (state === HeaderState.KEY) {\n            if (!this._storeKey(pos)) return this._a();\n            state = HeaderState.VALUE;\n            pos = 0;\n          } else if (state === HeaderState.VALUE) {\n            if (pos >= MAX_FIELDCHARS) return this._a();\n            buffer[pos++] = c;\n          }\n          break;\n        case 58: // :\n          if (state === HeaderState.VALUE) {\n            if (!this._storeValue(pos)) return this._a();\n          }\n          this.state = HeaderState.END;\n          return i + 1;\n        default:\n          if (pos >= MAX_FIELDCHARS) return this._a();\n          buffer[pos++] = c;\n      }\n    }\n    this.state = state;\n    this._position = pos;\n    return -2;\n  }\n\n  private _a(): number {\n    this.state = HeaderState.ABORT;\n    return -1;\n  }\n\n  private _storeKey(pos: number): boolean {\n    const k = toStr(this._buffer.subarray(0, pos));\n    if (k) {\n      this._key = k;\n      this.fields[k] = null;\n      return true;\n    }\n    return false;\n  }\n\n  private _storeValue(pos: number): boolean {\n    if (this._key) {\n      try {\n        const v = this._buffer.slice(0, pos);\n        this.fields[this._key] = DECODERS[this._key] ? DECODERS[this._key](v) : v;\n      } catch (e) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n}\n","/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\nexport type ImageType = 'image/png' | 'image/jpeg' | 'image/gif' | 'unsupported' | '';\n\nexport interface IMetrics {\n  mime: ImageType;\n  width: number;\n  height: number;\n}\n\nexport const UNSUPPORTED_TYPE: IMetrics = {\n  mime: 'unsupported',\n  width: 0,\n  height: 0\n};\n\nexport function imageType(d: Uint8Array): IMetrics {\n  if (d.length < 24) {\n    return UNSUPPORTED_TYPE;\n  }\n  const d32 = new Uint32Array(d.buffer, d.byteOffset, 6);\n  // PNG: 89 50 4E 47 0D 0A 1A 0A (8 first bytes == magic number for PNG)\n  // + first chunk must be IHDR\n  if (d32[0] === 0x474E5089 && d32[1] === 0x0A1A0A0D && d32[3] === 0x52444849) {\n    return {\n      mime: 'image/png',\n      width: d[16] << 24 | d[17] << 16 | d[18] << 8 | d[19],\n      height: d[20] << 24 | d[21] << 16 | d[22] << 8 | d[23]\n    };\n  }\n  // JPEG: FF D8 FF E0 xx xx JFIF  or  FF D8 FF E1 xx xx Exif 00 00\n  if ((d32[0] === 0xE0FFD8FF || d32[0] === 0xE1FFD8FF)\n    &&  (\n      (d[6] === 0x4a && d[7] === 0x46 && d[8] === 0x49 && d[9] === 0x46)\n        ||  (d[6] === 0x45 && d[7] === 0x78 && d[8] === 0x69 && d[9] === 0x66)\n    )\n  ) {\n    const [width, height] = jpgSize(d);\n    return { mime: 'image/jpeg', width, height };\n  }\n  // GIF: GIF87a or GIF89a\n  if (d32[0] === 0x38464947 && (d[4] === 0x37 || d[4] === 0x39) && d[5] === 0x61) {\n    return {\n      mime: 'image/gif',\n      width: d[7] << 8 | d[6],\n      height: d[9] << 8 | d[8]\n    };\n  }\n  return UNSUPPORTED_TYPE;\n}\n\nfunction jpgSize(d: Uint8Array): [number, number] {\n  const len = d.length;\n  let i = 4;\n  let blockLength = d[i] << 8 | d[i + 1];\n  while (true) {\n    i += blockLength;\n    if (i >= len) {\n      // exhausted without size info\n      return [0, 0];\n    }\n    if (d[i] !== 0xFF) {\n      return [0, 0];\n    }\n    if (d[i + 1] === 0xC0 || d[i + 1] === 0xC2) {\n      if (i + 8 < len) {\n        return [\n          d[i + 7] << 8 | d[i + 8],\n          d[i + 5] << 8 | d[i + 6]\n        ];\n      }\n      return [0, 0];\n    }\n    i += 2;\n    blockLength = d[i] << 8 | d[i + 1];\n  }\n}\n","/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { toRGBA8888 } from 'sixel/lib/Colors';\nimport { IDisposable } from 'xterm';\nimport { ICellSize, ITerminalExt, IImageSpec, IRenderDimensions, IRenderService } from './Types';\n\n\nconst PLACEHOLDER_LENGTH = 4096;\nconst PLACEHOLDER_HEIGHT = 24;\n\n/**\n * ImageRenderer - terminal frontend extension:\n * - provide primitives for canvas, ImageData, Bitmap (static)\n * - add canvas layer to DOM (browser only for now)\n * - draw image tiles onRender\n */\nexport class ImageRenderer implements IDisposable {\n  public canvas: HTMLCanvasElement | undefined;\n  private _ctx: CanvasRenderingContext2D | null | undefined;\n  private _placeholder: HTMLCanvasElement | undefined;\n  private _placeholderBitmap: ImageBitmap | undefined;\n  private _optionsRefresh: IDisposable | undefined;\n  private _oldOpen: ((parent: HTMLElement) => void) | undefined;\n  private _renderService: IRenderService | undefined;\n  private _oldSetRenderer: ((renderer: any) => void) | undefined;\n\n  // drawing primitive - canvas\n  public static createCanvas(localDocument: Document | undefined, width: number, height: number): HTMLCanvasElement {\n    /**\n     * NOTE: We normally dont care, from which document the canvas\n     * gets created, so we can fall back to global document,\n     * if the terminal has no document associated yet.\n     * This way early image loads before calling .open keep working\n     * (still discouraged though, as the metrics will be screwed up).\n     * Only the DOM output canvas should be on the terminal's document,\n     * which gets explicitly checked in `insertLayerToDom`.\n     */\n    const canvas = (localDocument || document).createElement('canvas');\n    canvas.width = width | 0;\n    canvas.height = height | 0;\n    return canvas;\n  }\n\n  // drawing primitive - ImageData with optional buffer\n  public static createImageData(ctx: CanvasRenderingContext2D, width: number, height: number, buffer?: ArrayBuffer): ImageData {\n    if (typeof ImageData !== 'function') {\n      const imgData = ctx.createImageData(width, height);\n      if (buffer) {\n        imgData.data.set(new Uint8ClampedArray(buffer, 0, width * height * 4));\n      }\n      return imgData;\n    }\n    return buffer\n      ? new ImageData(new Uint8ClampedArray(buffer, 0, width * height * 4), width, height)\n      : new ImageData(width, height);\n  }\n\n  // drawing primitive - ImageBitmap\n  public static createImageBitmap(img: ImageBitmapSource): Promise<ImageBitmap | undefined> {\n    if (typeof createImageBitmap !== 'function') {\n      return Promise.resolve(undefined);\n    }\n    return createImageBitmap(img);\n  }\n\n\n  constructor(private _terminal: ITerminalExt) {\n    this._oldOpen = this._terminal._core.open;\n    this._terminal._core.open = (parent: HTMLElement): void => {\n      this._oldOpen?.call(this._terminal._core, parent);\n      this._open();\n    };\n    if (this._terminal._core.screenElement) {\n      this._open();\n    }\n    // hack to spot fontSize changes\n    this._optionsRefresh = this._terminal._core.optionsService.onOptionChange(option => {\n      if (option === 'fontSize') {\n        this.rescaleCanvas();\n        this._renderService?.refreshRows(0, this._terminal.rows);\n      }\n    });\n  }\n\n\n  public dispose(): void {\n    this._optionsRefresh?.dispose();\n    this.removeLayerFromDom();\n    if (this._terminal._core && this._oldOpen) {\n      this._terminal._core.open = this._oldOpen;\n      this._oldOpen = undefined;\n    }\n    if (this._renderService && this._oldSetRenderer) {\n      this._renderService.setRenderer = this._oldSetRenderer;\n      this._oldSetRenderer = undefined;\n    }\n    this._renderService = undefined;\n    this.canvas = undefined;\n    this._ctx = undefined;\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n    this._placeholder = undefined;\n  }\n\n  /**\n   * Enable the placeholder.\n   */\n  public showPlaceholder(value: boolean): void {\n    if (value) {\n      if (!this._placeholder && this.cellSize.height !== -1) {\n        this._createPlaceHolder(Math.max(this.cellSize.height + 1, PLACEHOLDER_HEIGHT));\n      }\n    } else {\n      this._placeholderBitmap?.close();\n      this._placeholderBitmap = undefined;\n      this._placeholder = undefined;\n    }\n    this._renderService?.refreshRows(0, this._terminal.rows);\n  }\n\n  /**\n   * Dimensions of the terminal.\n   * Forwarded from internal render service.\n   */\n  public get dimensions(): IRenderDimensions | undefined {\n    return this._renderService?.dimensions;\n  }\n\n  /**\n   * Current cell size (float).\n   */\n  public get cellSize(): ICellSize {\n    return {\n      width: this.dimensions?.css.cell.width || -1,\n      height: this.dimensions?.css.cell.height || -1\n    };\n  }\n\n  /**\n   * Clear a region of the image layer canvas.\n   */\n  public clearLines(start: number, end: number): void {\n    this._ctx?.clearRect(\n      0,\n      start * (this.dimensions?.css.cell.height || 0),\n      this.dimensions?.css.canvas.width || 0,\n      (++end - start) * (this.dimensions?.css.cell.height || 0)\n    );\n  }\n\n  /**\n   * Clear whole image canvas.\n   */\n  public clearAll(): void {\n    this._ctx?.clearRect(0, 0, this.canvas?.width || 0, this.canvas?.height || 0);\n  }\n\n  /**\n   * Draw neighboring tiles on the image layer canvas.\n   */\n  public draw(imgSpec: IImageSpec, tileId: number, col: number, row: number, count: number = 1): void {\n    if (!this._ctx) {\n      return;\n    }\n    const { width, height } = this.cellSize;\n\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const dx = col * width;\n    const dy = row * height;\n\n    // safari bug: never access image source out of bounds\n    const finalWidth = count * width + sx > img.width ? img.width - sx : count * width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    // Floor all pixel offsets to get stable tile mapping without any overflows.\n    // Note: For not pixel perfect aligned cells like in the DOM renderer\n    // this will move a tile slightly to the top/left (subpixel range, thus ignore it).\n    // FIX #34: avoid striping on displays with pixelDeviceRatio != 1 by ceiling height and width\n    this._ctx.drawImage(\n      img,\n      Math.floor(sx), Math.floor(sy), Math.ceil(finalWidth), Math.ceil(finalHeight),\n      Math.floor(dx), Math.floor(dy), Math.ceil(finalWidth), Math.ceil(finalHeight)\n    );\n  }\n\n  /**\n   * Extract a single tile from an image.\n   */\n  public extractTile(imgSpec: IImageSpec, tileId: number): HTMLCanvasElement | undefined {\n    const { width, height } = this.cellSize;\n    // Don't try to draw anything, if we cannot get valid renderer metrics.\n    if (width === -1 || height === -1) {\n      return;\n    }\n    this._rescaleImage(imgSpec, width, height);\n    const img = imgSpec.actual!;\n    const cols = Math.ceil(img.width / width);\n    const sx = (tileId % cols) * width;\n    const sy = Math.floor(tileId / cols) * height;\n    const finalWidth = width + sx > img.width ? img.width - sx : width;\n    const finalHeight = sy + height > img.height ? img.height - sy : height;\n\n    const canvas = ImageRenderer.createCanvas(this.document, finalWidth, finalHeight);\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(\n        img,\n        Math.floor(sx), Math.floor(sy), Math.floor(finalWidth), Math.floor(finalHeight),\n        0, 0, Math.floor(finalWidth), Math.floor(finalHeight)\n      );\n      return canvas;\n    }\n  }\n\n  /**\n   * Draw a line with placeholder on the image layer canvas.\n   */\n  public drawPlaceholder(col: number, row: number, count: number = 1): void {\n    if (this._ctx) {\n      const { width, height } = this.cellSize;\n\n      // Don't try to draw anything, if we cannot get valid renderer metrics.\n      if (width === -1 || height === -1) {\n        return;\n      }\n\n      if (!this._placeholder) {\n        this._createPlaceHolder(Math.max(height + 1, PLACEHOLDER_HEIGHT));\n      } else if (height >= this._placeholder!.height) {\n        this._createPlaceHolder(height + 1);\n      }\n      if (!this._placeholder) return;\n      this._ctx.drawImage(\n        this._placeholderBitmap || this._placeholder!,\n        col * width,\n        (row * height) % 2 ? 0 : 1,  // needs %2 offset correction\n        width * count,\n        height,\n        col * width,\n        row * height,\n        width * count,\n        height\n      );\n    }\n  }\n\n  /**\n   * Rescale image layer canvas if needed.\n   * Checked once from `ImageStorage.render`.\n   */\n  public rescaleCanvas(): void {\n    if (!this.canvas) {\n      return;\n    }\n    if (this.canvas.width !== this.dimensions!.css.canvas.width || this.canvas.height !== this.dimensions!.css.canvas.height) {\n      this.canvas.width = this.dimensions!.css.canvas.width || 0;\n      this.canvas.height = this.dimensions!.css.canvas.height || 0;\n    }\n  }\n\n  /**\n   * Rescale image in storage if needed.\n   */\n  private _rescaleImage(spec: IImageSpec, currentWidth: number, currentHeight: number): void {\n    if (currentWidth === spec.actualCellSize.width && currentHeight === spec.actualCellSize.height) {\n      return;\n    }\n    const { width: originalWidth, height: originalHeight } = spec.origCellSize;\n    if (currentWidth === originalWidth && currentHeight === originalHeight) {\n      spec.actual = spec.orig;\n      spec.actualCellSize.width = originalWidth;\n      spec.actualCellSize.height = originalHeight;\n      return;\n    }\n    const canvas = ImageRenderer.createCanvas(\n      this.document,\n      Math.ceil(spec.orig!.width * currentWidth / originalWidth),\n      Math.ceil(spec.orig!.height * currentHeight / originalHeight)\n    );\n    const ctx = canvas.getContext('2d');\n    if (ctx) {\n      ctx.drawImage(spec.orig!, 0, 0, canvas.width, canvas.height);\n      spec.actual = canvas;\n      spec.actualCellSize.width = currentWidth;\n      spec.actualCellSize.height = currentHeight;\n    }\n  }\n\n  /**\n   * Lazy init for the renderer.\n   */\n  private _open(): void {\n    this._renderService = this._terminal._core._renderService;\n    this._oldSetRenderer = this._renderService.setRenderer.bind(this._renderService);\n    this._renderService.setRenderer = (renderer: any) => {\n      this.removeLayerFromDom();\n      this._oldSetRenderer?.call(this._renderService, renderer);\n    };\n  }\n\n  public insertLayerToDom(): void {\n    // make sure that the terminal is attached to a document and to DOM\n    if (this.document && this._terminal._core.screenElement) {\n      if (!this.canvas) {\n        this.canvas = ImageRenderer.createCanvas(\n          this.document, this.dimensions?.css.canvas.width || 0,\n          this.dimensions?.css.canvas.height || 0\n        );\n        this.canvas.classList.add('xterm-image-layer');\n        this._terminal._core.screenElement.appendChild(this.canvas);\n        this._ctx = this.canvas.getContext('2d', { alpha: true, desynchronized: true });\n        this.clearAll();\n      }\n    } else {\n      console.warn('image addon: cannot insert output canvas to DOM, missing document or screenElement');\n    }\n  }\n\n  public removeLayerFromDom(): void {\n    if (this.canvas) {\n      this._ctx = undefined;\n      this.canvas.remove();\n      this.canvas = undefined;\n    }\n  }\n\n  private _createPlaceHolder(height: number = PLACEHOLDER_HEIGHT): void {\n    this._placeholderBitmap?.close();\n    this._placeholderBitmap = undefined;\n\n    // create blueprint to fill placeholder with\n    const bWidth = 32;  // must be 2^n\n    const blueprint = ImageRenderer.createCanvas(this.document, bWidth, height);\n    const ctx = blueprint.getContext('2d', { alpha: false });\n    if (!ctx) return;\n    const imgData = ImageRenderer.createImageData(ctx, bWidth, height);\n    const d32 = new Uint32Array(imgData.data.buffer);\n    const black = toRGBA8888(0, 0, 0);\n    const white = toRGBA8888(255, 255, 255);\n    d32.fill(black);\n    for (let y = 0; y < height; ++y) {\n      const shift = y % 2;\n      const offset = y * bWidth;\n      for (let x = 0; x < bWidth; x += 2) {\n        d32[offset + x + shift] = white;\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n\n    // create placeholder line, width aligned to blueprint width\n    const width = (screen.width + bWidth - 1) & ~(bWidth - 1) || PLACEHOLDER_LENGTH;\n    this._placeholder = ImageRenderer.createCanvas(this.document, width, height);\n    const ctx2 = this._placeholder.getContext('2d', { alpha: false });\n    if (!ctx2) {\n      this._placeholder = undefined;\n      return;\n    }\n    for (let i = 0; i < width; i += bWidth) {\n      ctx2.drawImage(blueprint, i, 0);\n    }\n    ImageRenderer.createImageBitmap(this._placeholder).then(bitmap => this._placeholderBitmap = bitmap);\n  }\n\n  public get document(): Document | undefined {\n    return this._terminal._core._coreBrowserService?.window.document;\n  }\n}\n","/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ITerminalExt, IExtendedAttrsImage, IImageAddonOptions, IImageSpec, IBufferLineExt, BgFlags, Cell, Content, ICellSize, ExtFlags, Attributes, UnderlineStyle } from './Types';\n\n\n// fallback default cell size\nexport const CELL_SIZE_DEFAULT: ICellSize = {\n  width: 7,\n  height: 14\n};\n\n/**\n * Extend extended attribute to also hold image tile information.\n *\n * Object definition is copied from base repo to fully mimick its behavior.\n * Image data is added as additional public properties `imageId` and `tileId`.\n */\nclass ExtendedAttrsImage implements IExtendedAttrsImage {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0,\n    public imageId = -1,\n    public tileId = -1\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrsImage {\n    /**\n     * Technically we dont need a clone variant of ExtendedAttrsImage,\n     * as we never clone a cell holding image data.\n     * Note: Clone is only meant to be used by the InputHandler for\n     * sticky attributes, which is never the case for image data.\n     * We still provide a proper clone method to reflect the full ext attr\n     * state in case there are future use cases for clone.\n     */\n    return new ExtendedAttrsImage(this._ext, this._urlId, this.imageId, this.tileId);\n  }\n\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0 && this.imageId === -1;\n  }\n}\nconst EMPTY_ATTRS = new ExtendedAttrsImage();\n\n\n/**\n * ImageStorage - extension of CoreTerminal:\n * - hold image data\n * - write/read image data to/from buffer\n *\n * TODO: image composition for overwrites\n */\nexport class ImageStorage implements IDisposable {\n  // storage\n  private _images: Map<number, IImageSpec> = new Map();\n  // last used id\n  private _lastId = 0;\n  // last evicted id\n  private _lowestId = 0;\n  // whether a full clear happened before\n  private _fullyCleared = false;\n  // whether render should do a full clear\n  private _needsFullClear = false;\n  // hard limit of stored pixels (fallback limit of 10 MB)\n  private _pixelLimit: number = 2500000;\n\n  private _viewportMetrics: { cols: number, rows: number };\n\n  constructor(\n    private _terminal: ITerminalExt,\n    private _renderer: ImageRenderer,\n    private _opts: IImageAddonOptions\n  ) {\n    try {\n      this.setLimit(this._opts.storageLimit);\n    } catch (e: any) {\n      console.error(e.message);\n      console.warn(`storageLimit is set to ${this.getLimit()} MB`);\n    }\n    this._viewportMetrics = {\n      cols: this._terminal.cols,\n      rows: this._terminal.rows\n    };\n  }\n\n  public dispose(): void {\n    this.reset();\n  }\n\n  public reset(): void {\n    for (const spec of this._images.values()) {\n      spec.marker?.dispose();\n    }\n    // NOTE: marker.dispose above already calls ImageBitmap.close\n    // therefore we can just wipe the map here\n    this._images.clear();\n    this._renderer.clearAll();\n  }\n\n  public getLimit(): number {\n    return this._pixelLimit * 4 / 1000000;\n  }\n\n  public setLimit(value: number): void {\n    if (value < 0.5 || value > 1000) {\n      throw RangeError('invalid storageLimit, should be at least 0.5 MB and not exceed 1G');\n    }\n    this._pixelLimit = (value / 4 * 1000000) >>> 0;\n    this._evictOldest(0);\n  }\n\n  public getUsage(): number {\n    return this._getStoredPixels() * 4 / 1000000;\n  }\n\n  private _getStoredPixels(): number {\n    let storedPixels = 0;\n    for (const spec of this._images.values()) {\n      if (spec.orig) {\n        storedPixels += spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.actual !== spec.orig) {\n          storedPixels += spec.actual.width * spec.actual.height;\n        }\n      }\n    }\n    return storedPixels;\n  }\n\n  private _delImg(id: number): void {\n    const spec = this._images.get(id);\n    this._images.delete(id);\n    // FIXME: really ugly workaround to get bitmaps deallocated :(\n    if (spec && window.ImageBitmap && spec.orig instanceof ImageBitmap) {\n      spec.orig.close();\n    }\n  }\n\n  /**\n   * Wipe canvas and images on alternate buffer.\n   */\n  public wipeAlternate(): void {\n    // remove all alternate tagged images\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate') {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._delImg(id);\n    }\n    // mark canvas to be wiped on next render\n    this._needsFullClear = true;\n    this._fullyCleared = false;\n  }\n\n  /**\n   * Only advance text cursor.\n   * This is an edge case from empty sixels carrying only a height but no pixels.\n   * Partially fixes https://github.com/jerch/xterm-addon-image/issues/37.\n   */\n  public advanceCursor(height: number): void {\n    if (this._opts.sixelScrolling) {\n      let cellSize = this._renderer.cellSize;\n      if (cellSize.width === -1 || cellSize.height === -1) {\n        cellSize = CELL_SIZE_DEFAULT;\n      }\n      const rows = Math.ceil(height / cellSize.height);\n      for (let i = 1; i < rows; ++i) {\n        this._terminal._core._inputHandler.lineFeed();\n      }\n    }\n  }\n\n  /**\n   * Method to add an image to the storage.\n   */\n  public addImage(img: HTMLCanvasElement | ImageBitmap): void {\n    // never allow storage to exceed memory limit\n    this._evictOldest(img.width * img.height);\n\n    // calc rows x cols needed to display the image\n    let cellSize = this._renderer.cellSize;\n    if (cellSize.width === -1 || cellSize.height === -1) {\n      cellSize = CELL_SIZE_DEFAULT;\n    }\n    const cols = Math.ceil(img.width / cellSize.width);\n    const rows = Math.ceil(img.height / cellSize.height);\n\n    const imageId = ++this._lastId;\n\n    const buffer = this._terminal._core.buffer;\n    const termCols = this._terminal.cols;\n    const termRows = this._terminal.rows;\n    const originX = buffer.x;\n    const originY = buffer.y;\n    let offset = originX;\n    let tileCount = 0;\n\n    if (!this._opts.sixelScrolling) {\n      buffer.x = 0;\n      buffer.y = 0;\n      offset = 0;\n    }\n\n    this._terminal._core._inputHandler._dirtyRowTracker.markDirty(buffer.y);\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(buffer.y + buffer.ybase);\n      for (let col = 0; col < cols; ++col) {\n        if (offset + col >= termCols) break;\n        this._writeToCell(line as IBufferLineExt, offset + col, imageId, row * cols + col);\n        tileCount++;\n      }\n      if (this._opts.sixelScrolling) {\n        if (row < rows - 1) this._terminal._core._inputHandler.lineFeed();\n      } else {\n        if (++buffer.y >= termRows) break;\n      }\n      buffer.x = offset;\n    }\n    this._terminal._core._inputHandler._dirtyRowTracker.markDirty(buffer.y);\n\n    // cursor positioning modes\n    if (this._opts.sixelScrolling) {\n      buffer.x = offset;\n    } else {\n      buffer.x = originX;\n      buffer.y = originY;\n    }\n\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.tileCount < 1) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._delImg(id);\n    }\n\n    // eviction marker:\n    // delete the image when the marker gets disposed\n    const endMarker = this._terminal.registerMarker(0);\n    endMarker?.onDispose(() => {\n      const spec = this._images.get(imageId);\n      if (spec) {\n        this._delImg(imageId);\n      }\n    });\n\n    // since markers do not work on alternate for some reason,\n    // we evict images here manually\n    if (this._terminal.buffer.active.type === 'alternate') {\n      this._evictOnAlternate();\n    }\n\n    // create storage entry\n    const imgSpec: IImageSpec = {\n      orig: img,\n      origCellSize: cellSize,\n      actual: img,\n      actualCellSize: { ...cellSize },  // clone needed, since later modified\n      marker: endMarker || undefined,\n      tileCount,\n      bufferType: this._terminal.buffer.active.type\n    };\n\n    // finally add the image\n    this._images.set(imageId, imgSpec);\n  }\n\n\n  /**\n   * Render method. Collects buffer information and triggers\n   * canvas updates.\n   */\n  // TODO: Should we move this to the ImageRenderer?\n  public render(range: { start: number, end: number }): void {\n    // setup image canvas in case we have none yet, but have images in store\n    if (!this._renderer.canvas && this._images.size) {\n      this._renderer.insertLayerToDom();\n      // safety measure - in case we cannot spawn a canvas at all, just exit\n      if (!this._renderer.canvas) {\n        return;\n      }\n    }\n    // rescale if needed\n    this._renderer.rescaleCanvas();\n    // exit early if we dont have any images to test for\n    if (!this._images.size) {\n      if (!this._fullyCleared) {\n        this._renderer.clearAll();\n        this._fullyCleared = true;\n        this._needsFullClear = false;\n      }\n      if (this._renderer.canvas) {\n        this._renderer.removeLayerFromDom();\n      }\n      return;\n    }\n\n    // buffer switches force a full clear\n    if (this._needsFullClear) {\n      this._renderer.clearAll();\n      this._fullyCleared = true;\n      this._needsFullClear = false;\n    }\n\n    const { start, end } = range;\n    const buffer = this._terminal._core.buffer;\n    const cols = this._terminal._core.cols;\n\n    // clear drawing area\n    this._renderer.clearLines(start, end);\n\n    // walk all cells in viewport and draw tiles found\n    for (let row = start; row <= end; ++row) {\n      const line = buffer.lines.get(row + buffer.ydisp) as IBufferLineExt;\n      if (!line) return;\n      for (let col = 0; col < cols; ++col) {\n        if (line.getBg(col) & BgFlags.HAS_EXTENDED) {\n          let e: IExtendedAttrsImage = line._extendedAttrs[col] || EMPTY_ATTRS;\n          const imageId = e.imageId;\n          if (imageId === undefined || imageId === -1) {\n            continue;\n          }\n          const imgSpec = this._images.get(imageId);\n          if (e.tileId !== -1) {\n            const startTile = e.tileId;\n            const startCol = col;\n            let count = 1;\n            /**\n             * merge tiles to the right into a single draw call, if:\n             * - not at end of line\n             * - cell has same image id\n             * - cell has consecutive tile id\n             */\n            while (\n              ++col < cols\n              && (line.getBg(col) & BgFlags.HAS_EXTENDED)\n              && (e = line._extendedAttrs[col] || EMPTY_ATTRS)\n              && (e.imageId === imageId)\n              && (e.tileId === startTile + count)\n            ) {\n              count++;\n            }\n            col--;\n            if (imgSpec) {\n              if (imgSpec.actual) {\n                this._renderer.draw(imgSpec, startTile, startCol, row, count);\n              }\n            } else if (this._opts.showPlaceholder) {\n              this._renderer.drawPlaceholder(startCol, row, count);\n            }\n            this._fullyCleared = false;\n          }\n        }\n      }\n    }\n  }\n\n  public viewportResize(metrics: { cols: number, rows: number }): void {\n    // exit early if we have nothing in storage\n    if (!this._images.size) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // handle only viewport width enlargements, exit all other cases\n    // TODO: needs patch for tile counter\n    if (this._viewportMetrics.cols >= metrics.cols) {\n      this._viewportMetrics = metrics;\n      return;\n    }\n\n    // walk scrollbuffer at old col width to find all possible expansion matches\n    const buffer = this._terminal._core.buffer;\n    const rows = buffer.lines.length;\n    const oldCol = this._viewportMetrics.cols - 1;\n    for (let row = 0; row < rows; ++row) {\n      const line = buffer.lines.get(row) as IBufferLineExt;\n      if (line.getBg(oldCol) & BgFlags.HAS_EXTENDED) {\n        const e: IExtendedAttrsImage = line._extendedAttrs[oldCol] || EMPTY_ATTRS;\n        const imageId = e.imageId;\n        if (imageId === undefined || imageId === -1) {\n          continue;\n        }\n        const imgSpec = this._images.get(imageId);\n        if (!imgSpec) {\n          continue;\n        }\n        // found an image tile at oldCol, check if it qualifies for right exapansion\n        const tilesPerRow = Math.ceil((imgSpec.actual?.width || 0) / imgSpec.actualCellSize.width);\n        if ((e.tileId % tilesPerRow) + 1 >= tilesPerRow) {\n          continue;\n        }\n        // expand only if right side is empty (nothing got wrapped from below)\n        let hasData = false;\n        for (let rightCol = oldCol + 1; rightCol > metrics.cols; ++rightCol) {\n          if (line._data[rightCol * Cell.SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) {\n            hasData = true;\n            break;\n          }\n        }\n        if (hasData) {\n          continue;\n        }\n        // do right expansion on terminal buffer\n        const end = Math.min(metrics.cols, tilesPerRow - (e.tileId % tilesPerRow) + oldCol);\n        let lastTile = e.tileId;\n        for (let expandCol = oldCol + 1; expandCol < end; ++expandCol) {\n          this._writeToCell(line as IBufferLineExt, expandCol, imageId, ++lastTile);\n          imgSpec.tileCount++;\n        }\n      }\n    }\n    // store new viewport metrics\n    this._viewportMetrics = metrics;\n  }\n\n  /**\n   * Retrieve original canvas at buffer position.\n   */\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1) {\n        const orig = this._images.get(e.imageId)?.orig;\n        if (window.ImageBitmap && orig instanceof ImageBitmap) {\n          const canvas = ImageRenderer.createCanvas(window.document, orig.width, orig.height);\n          canvas.getContext('2d')?.drawImage(orig, 0, 0, orig.width, orig.height);\n          return canvas;\n        }\n        return orig as HTMLCanvasElement;\n      }\n    }\n  }\n\n  /**\n   * Extract active single tile at buffer position.\n   */\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    const buffer = this._terminal._core.buffer;\n    const line = buffer.lines.get(y) as IBufferLineExt;\n    if (line && line.getBg(x) & BgFlags.HAS_EXTENDED) {\n      const e: IExtendedAttrsImage = line._extendedAttrs[x] || EMPTY_ATTRS;\n      if (e.imageId && e.imageId !== -1 && e.tileId !== -1) {\n        const spec = this._images.get(e.imageId);\n        if (spec) {\n          return this._renderer.extractTile(spec, e.tileId);\n        }\n      }\n    }\n  }\n\n  // TODO: Do we need some blob offloading tricks here to avoid early eviction?\n  // also see https://stackoverflow.com/questions/28307789/is-there-any-limitation-on-javascript-max-blob-size\n  private _evictOldest(room: number): number {\n    const used = this._getStoredPixels();\n    let current = used;\n    while (this._pixelLimit < current + room && this._images.size) {\n      const spec = this._images.get(++this._lowestId);\n      if (spec && spec.orig) {\n        current -= spec.orig.width * spec.orig.height;\n        if (spec.actual && spec.orig !== spec.actual) {\n          current -= spec.actual.width * spec.actual.height;\n        }\n        spec.marker?.dispose();\n        this._delImg(this._lowestId);\n      }\n    }\n    return used - current;\n  }\n\n  private _writeToCell(line: IBufferLineExt, x: number, imageId: number, tileId: number): void {\n    if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n      const old = line._extendedAttrs[x];\n      if (old) {\n        if (old.imageId !== undefined) {\n          // found an old ExtendedAttrsImage, since we know that\n          // they are always isolated instances (single cell usage),\n          // we can re-use it and just update their id entries\n          const oldSpec = this._images.get(old.imageId);\n          if (oldSpec) {\n            // early eviction for in-viewport overwrites\n            oldSpec.tileCount--;\n          }\n          old.imageId = imageId;\n          old.tileId = tileId;\n          return;\n        }\n        // found a plain ExtendedAttrs instance, clone it to new entry\n        line._extendedAttrs[x] = new ExtendedAttrsImage(old.ext, old.urlId, imageId, tileId);\n        return;\n      }\n    }\n    // fall-through: always create new ExtendedAttrsImage entry\n    line._data[x * Cell.SIZE + Cell.BG] |= BgFlags.HAS_EXTENDED;\n    line._extendedAttrs[x] = new ExtendedAttrsImage(0, 0, imageId, tileId);\n  }\n\n  private _evictOnAlternate(): void {\n    // nullify tile count of all images on alternate buffer\n    for (const spec of this._images.values()) {\n      if (spec.bufferType === 'alternate') {\n        spec.tileCount = 0;\n      }\n    }\n    // re-count tiles on whole buffer\n    const buffer = this._terminal._core.buffer;\n    for (let y = 0; y < this._terminal.rows; ++y) {\n      const line = buffer.lines.get(y) as IBufferLineExt;\n      if (!line) {\n        continue;\n      }\n      for (let x = 0; x < this._terminal.cols; ++x) {\n        if (line._data[x * Cell.SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          const imgId = line._extendedAttrs[x]?.imageId;\n          if (imgId) {\n            const spec = this._images.get(imgId);\n            if (spec) {\n              spec.tileCount++;\n            }\n          }\n        }\n      }\n    }\n    // deleted images with zero tile count\n    const zero = [];\n    for (const [id, spec] of this._images.entries()) {\n      if (spec.bufferType === 'alternate' && !spec.tileCount) {\n        spec.marker?.dispose();\n        zero.push(id);\n      }\n    }\n    for (const id of zero) {\n      this._delImg(id);\n    }\n  }\n}\n","/**\n * Copyright (c) 2020, 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ImageStorage } from './ImageStorage';\nimport { IDcsHandler, IParams, IImageAddonOptions, ITerminalExt, AttributeData, IResetHandler, ReadonlyColorSet } from './Types';\nimport { toRGBA8888, BIG_ENDIAN, PALETTE_ANSI_256, PALETTE_VT340_COLOR } from 'sixel/lib/Colors';\nimport { RGBA8888 } from 'sixel/lib/Types';\nimport { ImageRenderer } from './ImageRenderer';\n\nimport { DecoderAsync, Decoder } from 'sixel/lib/Decoder';\n\n// always free decoder ressources after decoding if it exceeds this limit\nconst MEM_PERMA_LIMIT = 4194304; // 1024 pixels * 1024 pixels * 4 channels = 4MB\n\n// custom default palette: VT340 (lower 16 colors) + ANSI256 (up to 256) + zeroed (up to 4096)\nconst DEFAULT_PALETTE = PALETTE_ANSI_256;\nDEFAULT_PALETTE.set(PALETTE_VT340_COLOR);\n\n\nexport class SixelHandler implements IDcsHandler, IResetHandler {\n  private _size = 0;\n  private _aborted = false;\n  private _dec: Decoder | undefined;\n\n  constructor(\n    private readonly _opts: IImageAddonOptions,\n    private readonly _storage: ImageStorage,\n    private readonly _coreTerminal: ITerminalExt\n  ) {\n    DecoderAsync({\n      memoryLimit: this._opts.pixelLimit * 4,\n      palette: DEFAULT_PALETTE,\n      paletteLimit: this._opts.sixelPaletteLimit\n    }).then(d => this._dec = d);\n  }\n\n  public reset(): void {\n    /**\n     * reset sixel decoder to defaults:\n     * - release all memory\n     * - nullify palette (4096)\n     * - apply default palette (256)\n     */\n    if (this._dec) {\n      this._dec.release();\n      // FIXME: missing interface on decoder to nullify full palette\n      (this._dec as any)._palette.fill(0);\n      this._dec.init(0, DEFAULT_PALETTE, this._opts.sixelPaletteLimit);\n    }\n  }\n\n  public hook(params: IParams): void {\n    this._size = 0;\n    this._aborted = false;\n    if (this._dec) {\n      const fillColor = params.params[1] === 1 ? 0 : extractActiveBg(\n        this._coreTerminal._core._inputHandler._curAttrData,\n        this._coreTerminal._core._themeService?.colors);\n      this._dec.init(fillColor, null, this._opts.sixelPaletteLimit);\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._aborted || !this._dec) {\n      return;\n    }\n    this._size += end - start;\n    if (this._size > this._opts.sixelSizeLimit) {\n      console.warn(`SIXEL: too much data, aborting`);\n      this._aborted = true;\n      this._dec.release();\n      return;\n    }\n    try {\n      this._dec.decode(data, start, end);\n    } catch (e) {\n      console.warn(`SIXEL: error while decoding image - ${e}`);\n      this._aborted = true;\n      this._dec.release();\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    if (this._aborted || !success || !this._dec) {\n      return true;\n    }\n\n    const width = this._dec.width;\n    const height = this._dec.height;\n\n    // partial fix for https://github.com/jerch/xterm-addon-image/issues/37\n    if (!width || ! height) {\n      if (height) {\n        this._storage.advanceCursor(height);\n      }\n      return true;\n    }\n\n    const canvas = ImageRenderer.createCanvas(undefined, width, height);\n    canvas.getContext('2d')?.putImageData(new ImageData(this._dec.data8, width, height), 0, 0);\n    if (this._dec.memoryUsage > MEM_PERMA_LIMIT) {\n      this._dec.release();\n    }\n    this._storage.addImage(canvas);\n    return true;\n  }\n}\n\n\n/**\n * Some helpers to extract current terminal colors.\n */\n\n// get currently active background color from terminal\n// also respect INVERSE setting\nfunction extractActiveBg(attr: AttributeData, colors: ReadonlyColorSet | undefined): RGBA8888 {\n  let bg = 0;\n  if (!colors) {\n    // FIXME: theme service is prolly not available yet,\n    // happens if .open() was not called yet (bug in core?)\n    return bg;\n  }\n  if (attr.isInverse()) {\n    if (attr.isFgDefault()) {\n      bg = convertLe(colors.foreground.rgba);\n    } else if (attr.isFgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getFgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getFgColor()].rgba);\n    }\n  } else {\n    if (attr.isBgDefault()) {\n      bg = convertLe(colors.background.rgba);\n    } else if (attr.isBgRGB()) {\n      const t = (attr.constructor as typeof AttributeData).toColorRGB(attr.getBgColor());\n      bg = toRGBA8888(...t);\n    } else {\n      bg = convertLe(colors.ansi[attr.getBgColor()].rgba);\n    }\n  }\n  return bg;\n}\n\n// rgba values on the color managers are always in BE, thus convert to LE\nfunction convertLe(color: number): RGBA8888 {\n  if (BIG_ENDIAN) return color;\n  return (color & 0xFF) << 24 | (color >>> 8 & 0xFF) << 16 | (color >>> 16 & 0xFF) << 8 | color >>> 24 & 0xFF;\n}\n","/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { InWasm, IWasmInstance, OutputMode, OutputType } from 'inwasm';\n\n\n// memory addresses in uint32\nconst enum P32 {\n  D0 = 256,\n  D1 = 512,\n  D2 = 768,\n  D3 = 1024,\n  STATE = 1280,\n  STATE_WP = 1280,\n  STATE_SP = 1281,\n  STATE_DP = 1282,\n  STATE_ESIZE = 1283,\n  STATE_BSIZE = 1284,\n  STATE_DATA = 1288   // 16 aligned\n}\n\n/**\n * wasm base64 decoder.\n */\nconst wasmDecode = InWasm({\n  name: 'decode',\n  type: OutputType.INSTANCE,\n  mode: OutputMode.SYNC,\n  srctype: 'Clang-C',\n  imports: {\n    env: { memory: new WebAssembly.Memory({ initial: 1 }) }\n  },\n  exports: {\n    dec: () => 0,\n    end: () => 0\n  },\n  compile: {\n    switches: ['-Wl,-z,stack-size=0', '-Wl,--stack-first']\n  },\n  code: `\n    typedef struct {\n      unsigned int wp;\n      unsigned int sp;\n      unsigned int dp;\n      unsigned int e_size;\n      unsigned int b_size;\n      unsigned int dummy[3];\n      unsigned char data[0];\n    } State;\n\n    unsigned int *D0 = (unsigned int *) ${P32.D0*4};\n    unsigned int *D1 = (unsigned int *) ${P32.D1*4};\n    unsigned int *D2 = (unsigned int *) ${P32.D2*4};\n    unsigned int *D3 = (unsigned int *) ${P32.D3*4};\n    State *state = (State *) ${P32.STATE*4};\n\n    __attribute__((noinline)) int dec() {\n      unsigned int nsp = (state->wp - 1) & ~3;\n      unsigned char *src = state->data + state->sp;\n      unsigned char *end = state->data + nsp;\n      unsigned char *dst = state->data + state->dp;\n      unsigned int accu;\n\n      while (src < end) {\n        if ((accu = D0[src[0]] | D1[src[1]] | D2[src[2]] | D3[src[3]]) >> 24) return 1;\n        *((unsigned int *) dst) = accu;\n        dst += 3;\n        src += 4;\n      }\n      state->sp = nsp;\n      state->dp = dst - state->data;\n      return 0;\n    }\n\n    int end() {\n      int rem = state->wp - state->sp;\n      if (rem > 4 && dec()) return 1;\n      rem = state->wp - state->sp;\n      if (rem < 2) return 1;\n\n      unsigned char *src = state->data + state->sp;\n      unsigned int accu = D0[src[0]] | D1[src[1]];\n      int dp = 1;\n      if (rem > 2 && src[2] != 61) {\n        accu |= D2[src[2]];\n        dp++;\n      }\n      if (rem == 4 && src[3] != 61) {\n        accu |= D3[src[3]];\n        dp++;\n      }\n      if (accu >> 24) return 1;\n      *((unsigned int *) (state->data + state->dp)) = accu;\n      state->dp += dp;\n      return state->dp != state->b_size;\n    }\n    `\n});\n\n// SIMD version - commented out for now due to missing Safari support\n// const wasmDecode = InWasm({\n//   name: 'decode',\n//   type: OutputType.INSTANCE,\n//   mode: OutputMode.SYNC,\n//   srctype: 'Clang-C',\n//   imports: {\n//     env: { memory: new WebAssembly.Memory({ initial: 1 }) }\n//   },\n//   exports: {\n//     dec: () => 0,\n//     end: () => 0\n//   },\n//   compile: {\n//     switches: ['-msimd128', '-Wl,-z,stack-size=0', '-Wl,--stack-first']\n//   },\n//   code: `\n//     #include <wasm_simd128.h>\n//     typedef struct {\n//       unsigned int wp;\n//       unsigned int sp;\n//       unsigned int dp;\n//       unsigned int e_size;\n//       unsigned int b_size;\n//       unsigned int dummy[3];\n//       unsigned char data[0];\n//     } State;\n//\n//     unsigned int *D0 = (unsigned int *) ${P32.D0*4};\n//     unsigned int *D1 = (unsigned int *) ${P32.D1*4};\n//     unsigned int *D2 = (unsigned int *) ${P32.D2*4};\n//     unsigned int *D3 = (unsigned int *) ${P32.D3*4};\n//     State *state = (State *) ${P32.STATE*4};\n//\n//     #define packed_byte(x) wasm_i8x16_splat((char) x)\n//     #define packed_dword(x) wasm_i32x4_splat(x)\n//     #define masked(x, mask) wasm_v128_and(x, wasm_i32x4_splat(mask))\n//\n//     int dec4() {\n//       unsigned int nsp = (state->wp - 1) & ~3;\n//       unsigned char *src = state->data + state->sp;\n//       unsigned char *end = state->data + nsp;\n//       unsigned char *dst = state->data + state->dp;\n//       unsigned int accu;\n//\n//       while (src < end) {\n//         if ((accu = D0[src[0]] | D1[src[1]] | D2[src[2]] | D3[src[3]]) >> 24) return 1;\n//         *((unsigned int *) dst) = accu;\n//         dst += 3;\n//         src += 4;\n//       }\n//       state->sp = nsp;\n//       state->dp = dst - state->data;\n//       return 0;\n//     }\n//\n//     int dec() {\n//       unsigned int nsp = (state->wp - 1) & ~15;\n//       unsigned char *src = state->data + state->sp;\n//       unsigned char *end = state->data + nsp;\n//       unsigned char *dst = state->data + state->dp;\n//       unsigned int accu;\n//\n//       v128_t err = wasm_i8x16_splat(0);\n//\n//       while (src < end) {\n//         v128_t data = wasm_v128_load((v128_t *) src);\n//\n//         // wasm-simd rewrite of http://0x80.pl/notesen/2016-01-17-sse-base64-decoding.html#vector-lookup-pshufb\n//         const v128_t higher_nibble = wasm_u32x4_shr(data, 4) & packed_byte(0x0f);\n//         const char linv = 1;\n//         const char hinv = 0;\n//\n//         const v128_t lower_bound_LUT = wasm_i8x16_make(\n//             /* 0 */ linv, /* 1 */ linv, /* 2 */ 0x2b, /* 3 */ 0x30,\n//             /* 4 */ 0x41, /* 5 */ 0x50, /* 6 */ 0x61, /* 7 */ 0x70,\n//             /* 8 */ linv, /* 9 */ linv, /* a */ linv, /* b */ linv,\n//             /* c */ linv, /* d */ linv, /* e */ linv, /* f */ linv\n//         );\n//         const v128_t upper_bound_LUT = wasm_i8x16_make(\n//             /* 0 */ hinv, /* 1 */ hinv, /* 2 */ 0x2b, /* 3 */ 0x39,\n//             /* 4 */ 0x4f, /* 5 */ 0x5a, /* 6 */ 0x6f, /* 7 */ 0x7a,\n//             /* 8 */ hinv, /* 9 */ hinv, /* a */ hinv, /* b */ hinv,\n//             /* c */ hinv, /* d */ hinv, /* e */ hinv, /* f */ hinv\n//         );\n//         // the difference between the shift and lower bound\n//         const v128_t shift_LUT = wasm_i8x16_make(\n//             /* 0 */ 0x00,        /* 1 */ 0x00,        /* 2 */ 0x3e - 0x2b, /* 3 */ 0x34 - 0x30,\n//             /* 4 */ 0x00 - 0x41, /* 5 */ 0x0f - 0x50, /* 6 */ 0x1a - 0x61, /* 7 */ 0x29 - 0x70,\n//             /* 8 */ 0x00,        /* 9 */ 0x00,        /* a */ 0x00,        /* b */ 0x00,\n//             /* c */ 0x00,        /* d */ 0x00,        /* e */ 0x00,        /* f */ 0x00\n//         );\n//\n//         const v128_t upper_bound = wasm_i8x16_swizzle(upper_bound_LUT, higher_nibble);\n//         const v128_t lower_bound = wasm_i8x16_swizzle(lower_bound_LUT, higher_nibble);\n//\n//         const v128_t below = wasm_i8x16_lt(data, lower_bound);\n//         const v128_t above = wasm_i8x16_gt(data, upper_bound);\n//         const v128_t eq_2f = wasm_i8x16_eq(data, packed_byte(0x2f));\n//\n//         // in_range = not (below or above) or eq_2f\n//         // outside  = not in_range = below or above and not eq_2f (from deMorgan law)\n//         const v128_t outside = wasm_v128_andnot(eq_2f, above | below);\n//         err = wasm_v128_or(err, outside);\n//\n//         const v128_t shift  = wasm_i8x16_swizzle(shift_LUT, higher_nibble);\n//         const v128_t t0     = wasm_i8x16_add(data, shift);\n//         v128_t v = wasm_i8x16_add(t0, wasm_v128_and(eq_2f, packed_byte(-3)));\n//\n//         // pack bytes\n//         const v128_t ca = masked(v, 0x003f003f);\n//         const v128_t db = masked(v, 0x3f003f00);\n//         const v128_t t00 = wasm_v128_or(wasm_u32x4_shr(db, 8), wasm_i32x4_shl(ca, 6));\n//         v128_t res = wasm_v128_or(wasm_u32x4_shr(t00, 16), wasm_i32x4_shl(t00, 12));\n//         res = wasm_i8x16_swizzle(res, wasm_i8x16_const(2, 1, 0, 6, 5, 4, 10, 9, 8, 14, 13, 12, 16, 16, 16, 16));\n//\n//         wasm_v128_store((v128_t *) dst, res);\n//         dst += 12;\n//         src += 16;\n//       }\n//\n//       if (wasm_i8x16_bitmask(err) != 0) return 1;\n//\n//       state->sp = nsp;\n//       state->dp = dst - state->data;\n//       return 0;\n//     }\n//\n//     int end() {\n//       int rem = state->wp - state->sp;\n//       if (rem > 4 && dec4()) return 1;\n//       rem = state->wp - state->sp;\n//       if (rem < 2) return 1;\n//\n//       unsigned char *src = state->data + state->sp;\n//       unsigned int accu = D0[src[0]] | D1[src[1]];\n//       int dp = 1;\n//       if (rem > 2 && src[2] != 61) {\n//         accu |= D2[src[2]];\n//         dp++;\n//       }\n//       if (rem == 4 && src[3] != 61) {\n//         accu |= D3[src[3]];\n//         dp++;\n//       }\n//       if (accu >> 24) return 1;\n//       *((unsigned int *) (state->data + state->dp)) = accu;\n//       state->dp += dp;\n//       return state->dp != state->b_size;\n//     }\n//     `\n// });\n\n// FIXME: currently broken in inwasm\ntype ExtractDefinition<Type> = Type extends () => IWasmInstance<infer X> ? X : never;\ntype DecodeDefinition = ExtractDefinition<typeof wasmDecode>;\n\n// base64 map\nconst MAP = new Uint8Array(\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    .split('')\n    .map(el => el.charCodeAt(0))\n);\n\n// init decoder maps in LE order\nconst D = new Uint32Array(1024);\nD.fill(0xFF000000);\nfor (let i = 0; i < MAP.length; ++i) D[MAP[i]] = i << 2;\nfor (let i = 0; i < MAP.length; ++i) D[256 + MAP[i]] = i >> 4 | ((i << 4) & 0xFF) << 8;\nfor (let i = 0; i < MAP.length; ++i) D[512 + MAP[i]] = (i >> 2) << 8 | ((i << 6) & 0xFF) << 16;\nfor (let i = 0; i < MAP.length; ++i) D[768 + MAP[i]] = i << 16;\n\nconst EMPTY = new Uint8Array(0);\n\n/**\n * base64 streamline inplace decoder.\n *\n * Features / assumptions:\n * - optimized uint32 read/write (only LE support!)\n * - lazy chunkwise decoding\n * - errors out on any non base64 chars (no support for NL formatted base64)\n * - decodes in wasm\n * - inplace decoding to save memory\n * - supports a keepSize for lazy memory release\n */\nexport class Base64Decoder {\n  private _d!: Uint8Array;\n  private _m32!: Uint32Array;\n  private _inst!: IWasmInstance<DecodeDefinition>;\n  private _mem!: WebAssembly.Memory;\n\n  constructor(public keepSize: number) {}\n\n  /**\n   * Currently decoded bytes (borrowed).\n   * Must be accessed before calling `release` or `init`.\n   */\n  public get data8(): Uint8Array {\n    return this._inst ? this._d.subarray(0, this._m32[P32.STATE_DP]) : EMPTY;\n  }\n\n  /**\n   * Release memory conditionally based on `keepSize`.\n   * If memory gets released, also the wasm instance will be freed and recreated on next `init`,\n   * otherwise the instance will be reused.\n   */\n  public release(): void {\n    if (!this._inst) return;\n    if (this._mem.buffer.byteLength > this.keepSize) {\n      this._inst = this._m32 = this._d = this._mem = null!;\n    } else {\n      this._m32[P32.STATE_WP] = 0;\n      this._m32[P32.STATE_SP] = 0;\n      this._m32[P32.STATE_DP] = 0;\n    }\n  }\n\n  /**\n   * Initializes the decoder for new base64 data.\n   * Must be called before doing any decoding attempts.\n   * `size` is the amount of decoded bytes to be expected.\n   * The method will either spawn a new wasm instance or grow\n   * the needed memory of an existing instance.\n   */\n  public init(size: number): void {\n    let m = this._m32;\n    const bytes = (Math.ceil(size / 3) + P32.STATE_DATA) * 4;\n    if (!this._inst) {\n      this._mem = new WebAssembly.Memory({ initial: Math.ceil(bytes / 65536) });\n      this._inst = wasmDecode({ env: { memory: this._mem } });\n      m = new Uint32Array(this._mem.buffer, 0);\n      m.set(D, P32.D0);\n      this._d = new Uint8Array(this._mem.buffer, P32.STATE_DATA * 4);\n    } else if (this._mem.buffer.byteLength < bytes) {\n      this._mem.grow(Math.ceil((bytes - this._mem.buffer.byteLength) / 65536));\n      m = new Uint32Array(this._mem.buffer, 0);\n      this._d = new Uint8Array(this._mem.buffer, P32.STATE_DATA * 4);\n    }\n    m[P32.STATE_BSIZE] = size;\n    m[P32.STATE_ESIZE] = Math.ceil(size / 3) * 4;\n    m[P32.STATE_WP] = 0;\n    m[P32.STATE_SP] = 0;\n    m[P32.STATE_DP] = 0;\n    this._m32 = m;\n  }\n\n  /**\n   * Put bytes in `data` from `start` to `end` (exclusive) into the decoder.\n   * Also decodes base64 data inplace once the payload exceeds 2^17 bytes.\n   * Returns 1 on error, else 0.\n   */\n  public put(data: Uint8Array | Uint16Array | Uint32Array, start: number, end: number): number {\n    if (!this._inst) return 1;\n    const m = this._m32;\n    if (end - start + m[P32.STATE_WP] > m[P32.STATE_ESIZE]) return 1;\n    this._d.set(data.subarray(start, end), m[P32.STATE_WP]);\n    m[P32.STATE_WP] += end - start;\n    // max chunk in input handler is 2^17, try to run in \"tandem mode\"\n    // also assures that we dont run into illegal offsets in the wasm part\n    return m[P32.STATE_WP] - m[P32.STATE_SP] >= 131072 ? this._inst.exports.dec() : 0;\n  }\n\n  /**\n   * End the current decoding.\n   * Decodes leftover payload and finally checks for the correct amount of\n   * decoded bytes by comparing to the value given to `init`.\n   * Returns 1 on error, else 0.\n   */\n  public end(): number {\n    return this._inst ? this._inst.exports.end() : 1;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IIPHandler } from './IIPHandler';\nimport { ITerminalAddon, IDisposable } from 'xterm';\nimport { ImageRenderer } from './ImageRenderer';\nimport { ImageStorage, CELL_SIZE_DEFAULT } from './ImageStorage';\nimport { SixelHandler } from './SixelHandler';\nimport { ITerminalExt, IImageAddonOptions, IResetHandler } from './Types';\n\n\n// default values of addon ctor options\nconst DEFAULT_OPTIONS: IImageAddonOptions = {\n  enableSizeReports: true,\n  pixelLimit: 16777216, // limit to 4096 * 4096 pixels\n  sixelSupport: true,\n  sixelScrolling: true,\n  sixelPaletteLimit: 256,\n  sixelSizeLimit: 25000000,\n  storageLimit: 128,\n  showPlaceholder: true,\n  iipSupport: true,\n  iipSizeLimit: 20000000\n};\n\n// max palette size supported by the sixel lib (compile time setting)\nconst MAX_SIXEL_PALETTE_SIZE = 4096;\n\n// definitions for _xtermGraphicsAttributes sequence\nconst enum GaItem {\n  COLORS = 1,\n  SIXEL_GEO = 2,\n  REGIS_GEO = 3\n}\nconst enum GaAction {\n  READ = 1,\n  SET_DEFAULT = 2,\n  SET = 3,\n  READ_MAX = 4\n}\nconst enum GaStatus {\n  SUCCESS = 0,\n  ITEM_ERROR = 1,\n  ACTION_ERROR = 2,\n  FAILURE = 3\n}\n\n\nexport class ImageAddon implements ITerminalAddon {\n  private _opts: IImageAddonOptions;\n  private _defaultOpts: IImageAddonOptions;\n  private _storage: ImageStorage | undefined;\n  private _renderer: ImageRenderer | undefined;\n  private _disposables: IDisposable[] = [];\n  private _terminal: ITerminalExt | undefined;\n  private _handlers: Map<String, IResetHandler> = new Map();\n\n  constructor(opts?: Partial<IImageAddonOptions>) {\n    this._opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n    this._defaultOpts = Object.assign({}, DEFAULT_OPTIONS, opts);\n  }\n\n  public dispose(): void {\n    for (const obj of this._disposables) {\n      obj.dispose();\n    }\n    this._disposables.length = 0;\n    this._handlers.clear();\n  }\n\n  private _disposeLater(...args: IDisposable[]): void {\n    for (const obj of args) {\n      this._disposables.push(obj);\n    }\n  }\n\n  public activate(terminal: ITerminalExt): void {\n    this._terminal = terminal;\n\n    // internal data structures\n    this._renderer = new ImageRenderer(terminal);\n    this._storage = new ImageStorage(terminal, this._renderer, this._opts);\n\n    // enable size reports\n    if (this._opts.enableSizeReports) {\n      // const windowOptions = terminal.getOption('windowOptions');\n      // windowOptions.getWinSizePixels = true;\n      // windowOptions.getCellSizePixels = true;\n      // windowOptions.getWinSizeChars = true;\n      // terminal.setOption('windowOptions', windowOptions);\n      const windowOps = terminal.options.windowOptions || {};\n      windowOps.getWinSizePixels = true;\n      windowOps.getCellSizePixels = true;\n      windowOps.getWinSizeChars = true;\n      terminal.options.windowOptions = windowOps;\n    }\n\n    this._disposeLater(\n      this._renderer,\n      this._storage,\n\n      // DECSET/DECRST/DA1/XTSMGRAPHICS handlers\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this._decset(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this._decrst(params)),\n      terminal.parser.registerCsiHandler({ final: 'c' }, params => this._da1(params)),\n      terminal.parser.registerCsiHandler({ prefix: '?', final: 'S' }, params => this._xtermGraphicsAttributes(params)),\n\n      // render hook\n      terminal.onRender(range => this._storage?.render(range)),\n\n      /**\n       * reset handlers covered:\n       * - DECSTR\n       * - RIS\n       * - Terminal.reset()\n       */\n      terminal.parser.registerCsiHandler({ intermediates: '!', final: 'p' }, () => this.reset()),\n      terminal.parser.registerEscHandler({ final: 'c' }, () => this.reset()),\n      terminal._core._inputHandler.onRequestReset(() => this.reset()),\n\n      // wipe canvas and delete alternate images on buffer switch\n      terminal.buffer.onBufferChange(() => this._storage?.wipeAlternate()),\n\n      // extend images to the right on resize\n      terminal.onResize(metrics => this._storage?.viewportResize(metrics))\n    );\n\n    // SIXEL handler\n    if (this._opts.sixelSupport) {\n      const sixelHandler = new SixelHandler(this._opts, this._storage!, terminal);\n      this._handlers.set('sixel', sixelHandler);\n      this._disposeLater(\n        terminal._core._inputHandler._parser.registerDcsHandler({ final: 'q' }, sixelHandler)\n      );\n    }\n\n    // iTerm IIP handler\n    if (this._opts.iipSupport) {\n      const iipHandler = new IIPHandler(this._opts, this._renderer!, this._storage!, terminal);\n      this._handlers.set('iip', iipHandler);\n      this._disposeLater(\n        terminal._core._inputHandler._parser.registerOscHandler(1337, iipHandler)\n      );\n    }\n  }\n\n  // Note: storageLimit is skipped here to not intoduce a surprising side effect.\n  public reset(): boolean {\n    // reset options customizable by sequences to defaults\n    this._opts.sixelScrolling = this._defaultOpts.sixelScrolling;\n    this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n    // also clear image storage\n    this._storage?.reset();\n    // reset protocol handlers\n    for (const handler of this._handlers.values()) {\n      handler.reset();\n    }\n    return false;\n  }\n\n  public get storageLimit(): number {\n    return this._storage?.getLimit() || -1;\n  }\n\n  public set storageLimit(limit: number) {\n    this._storage?.setLimit(limit);\n    this._opts.storageLimit = limit;\n  }\n\n  public get storageUsage(): number {\n    if (this._storage) {\n      return this._storage.getUsage();\n    }\n    return -1;\n  }\n\n  public get showPlaceholder(): boolean {\n    return this._opts.showPlaceholder;\n  }\n\n  public set showPlaceholder(value: boolean) {\n    this._opts.showPlaceholder = value;\n    this._renderer?.showPlaceholder(value);\n  }\n\n  public getImageAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.getImageAtBufferCell(x, y);\n  }\n\n  public extractTileAtBufferCell(x: number, y: number): HTMLCanvasElement | undefined {\n    return this._storage?.extractTileAtBufferCell(x, y);\n  }\n\n  private _report(s: string): void {\n    this._terminal?._core.coreService.triggerDataEvent(s);\n  }\n\n  private _decset(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = false;\n          break;\n      }\n    }\n    return false;\n  }\n\n  private _decrst(params: (number | number[])[]): boolean {\n    for (let i = 0; i < params.length; ++i) {\n      switch (params[i]) {\n        case 80:\n          this._opts.sixelScrolling = true;\n          break;\n      }\n    }\n    return false;\n  }\n\n  // overload DA to return something more appropriate\n  private _da1(params: (number | number[])[]): boolean {\n    if (params[0]) {\n      return true;\n    }\n    // reported features:\n    // 62 - VT220\n    // 4 - SIXEL support\n    // 9 - charsets\n    // 22 - ANSI colors\n    if (this._opts.sixelSupport) {\n      this._report(`\\x1b[?62;4;9;22c`);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Implementation of xterm's graphics attribute sequence.\n   *\n   * Supported features:\n   * - read/change palette limits (max 4096 by sixel lib)\n   * - read SIXEL canvas geometry (reports current window canvas or\n   *   squared pixelLimit if canvas > pixel limit)\n   *\n   * Everything else is deactivated.\n   */\n  private _xtermGraphicsAttributes(params: (number | number[])[]): boolean {\n    if (params.length < 2) {\n      return true;\n    }\n    if (params[0] === GaItem.COLORS) {\n      switch (params[1]) {\n        case GaAction.READ:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          return true;\n        case GaAction.SET_DEFAULT:\n          this._opts.sixelPaletteLimit = this._defaultOpts.sixelPaletteLimit;\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          // also reset protocol handlers for now\n          for (const handler of this._handlers.values()) {\n            handler.reset();\n          }\n          return true;\n        case GaAction.SET:\n          if (params.length > 2 && !(params[2] instanceof Array) && params[2] <= MAX_SIXEL_PALETTE_SIZE) {\n            this._opts.sixelPaletteLimit = params[2];\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${this._opts.sixelPaletteLimit}S`);\n          } else {\n            this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${MAX_SIXEL_PALETTE_SIZE}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    if (params[0] === GaItem.SIXEL_GEO) {\n      switch (params[1]) {\n        // we only implement read and read_max here\n        case GaAction.READ:\n          let width = this._renderer?.dimensions?.css.canvas.width;\n          let height = this._renderer?.dimensions?.css.canvas.height;\n          if (!width || !height) {\n            // for some reason we have no working image renderer\n            // --> fallback to default cell size\n            const cellSize = CELL_SIZE_DEFAULT;\n            width = (this._terminal?.cols || 80) * cellSize.width;\n            height = (this._terminal?.rows || 24) * cellSize.height;\n          }\n          if (width * height < this._opts.pixelLimit) {\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${width.toFixed(0)};${height.toFixed(0)}S`);\n          } else {\n            // if we overflow pixelLimit report that squared instead\n            const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n            this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          }\n          return true;\n        case GaAction.READ_MAX:\n          // read_max returns pixelLimit as square area\n          const x = Math.floor(Math.sqrt(this._opts.pixelLimit));\n          this._report(`\\x1b[?${params[0]};${GaStatus.SUCCESS};${x};${x}S`);\n          return true;\n        default:\n          this._report(`\\x1b[?${params[0]};${GaStatus.ACTION_ERROR}S`);\n          return true;\n      }\n    }\n    // exit with error on ReGIS or any other requests\n    this._report(`\\x1b[?${params[0]};${GaStatus.ITEM_ERROR}S`);\n    return true;\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","_dec","s","Buffer","from","bs","atob","r","Uint8Array","length","i","charCodeAt","Object","defineProperty","value","InWasm","def","d","t","bytes","mod","W","WebAssembly","Promise","resolve","Module","compile","then","m","e","Instance","instantiate","instance","_wasmCtx","Error","add","red","n","green","blue","toRGBA8888","g","b","a","clamp","low","high","Math","max","min","h2c","t1","t2","c","normalizeRGB","round","DEFAULT_FOREGROUND","DEFAULT_BACKGROUND","PALETTE_ANSI_256","PALETTE_VT340_GREY","PALETTE_VT340_COLOR","normalizeHLS","nearestColorIndex","fromRGBA8888","alpha","BIG_ENDIAN","Uint32Array","buffer","console","warn","color","palette","Number","MAX_SAFE_INTEGER","idx","dr","dg","db","h","l","v","HLStoRGB","p","push","decodeAsync","decode","Decoder","DecoderAsync","Colors_1","wasm_1","WASM_BYTES","bytestring","result","decodeBase64","LIMITS","BYTES","WASM_MODULE","NULL_CANVAS","CallbackProxy","constructor","this","bandHandler","width","modeHandler","mode","handle_band","mode_parsed","DEFAULT_OPTIONS","memoryLimit","sixelColor","fillColor","paletteLimit","PALETTE_SIZE","truncate","opts","cbProxy","importObj","env","bind","inst","_instance","_cbProxy","_PIXEL_OFFSET","MAX_WIDTH","_canvas","_bandWidths","_maxWidth","_minWidth","_lastOffset","_currentHeight","_opts","assign","_handle_band","_initCanvas","_wasm","_chunk","memory","get_chunk_address","CHUNK_SIZE","_states","get_state_address","_palette","get_palette_address","set","_pSrc","get_p0_address","init","_fillColor","_truncate","_rasterWidth","_rasterHeight","_width","_height","_level","_mode","_paletteLimit","pixels","height","release","_realloc","offset","additionalPixels","newCanvas","ceil","adv","remaining","subarray","current_width","current_height","memoryUsage","byteLength","properties","level","memUsage","rasterAttributes","numerator","denominator","data","start","end","decodeString","j","data32","currentWidth","fill","escape","final","finalOffset","bw","currentHeight","data8","Uint8ClampedArray","dec","async","DEFAULT_HEADER","name","size","preserveAspectRatio","inline","_renderer","_storage","_coreTerminal","_aborted","_hp","HeaderParser","_header","Base64Decoder","_metrics","UNSUPPORTED_TYPE","reset","put","state","dataPos","parse","fields","iipSizeLimit","success","w","cond","imageType","mime","pixelLimit","_resize","map","floor","blob","Blob","type","window","createImageBitmap","url","URL","createObjectURL","img","Image","addEventListener","revokeObjectURL","canvas","ImageRenderer","createCanvas","document","getContext","drawImage","addImage","src","setTimeout","resizeWidth","resizeHeight","bm","cw","dimensions","css","cell","CELL_SIZE_DEFAULT","ch","cols","rows","rw","_dim","rh","wf","hf","f","total","cdim","endsWith","parseInt","slice","toStr","String","fromCharCode","toInt","toSize","match","DECODERS","toString","TextDecoder","FILE_MARKER","MAX_FIELDCHARS","_buffer","_position","_key","pos","_storeValue","_a","k","_storeKey","d32","byteOffset","len","blockLength","jpgSize","localDocument","createElement","createImageData","ctx","ImageData","imgData","undefined","_terminal","_oldOpen","_core","open","parent","call","_open","screenElement","_optionsRefresh","optionsService","onOptionChange","option","rescaleCanvas","_renderService","refreshRows","dispose","removeLayerFromDom","_oldSetRenderer","setRenderer","_ctx","_placeholderBitmap","close","_placeholder","showPlaceholder","cellSize","_createPlaceHolder","clearLines","clearRect","clearAll","draw","imgSpec","tileId","col","row","count","_rescaleImage","actual","sx","sy","dx","dy","finalWidth","finalHeight","extractTile","drawPlaceholder","spec","actualCellSize","originalWidth","originalHeight","origCellSize","orig","renderer","insertLayerToDom","classList","appendChild","desynchronized","remove","bWidth","blueprint","black","white","y","shift","x","putImageData","screen","ctx2","bitmap","_coreBrowserService","ExtendedAttrsImage","ext","_urlId","_ext","underlineStyle","underlineColor","urlId","imageId","clone","isEmpty","EMPTY_ATTRS","_images","Map","_lastId","_lowestId","_fullyCleared","_needsFullClear","_pixelLimit","setLimit","storageLimit","error","message","getLimit","_viewportMetrics","values","marker","clear","RangeError","_evictOldest","getUsage","_getStoredPixels","storedPixels","_delImg","id","get","delete","ImageBitmap","wipeAlternate","zero","entries","bufferType","advanceCursor","sixelScrolling","_inputHandler","lineFeed","termCols","termRows","originX","originY","tileCount","_dirtyRowTracker","markDirty","line","lines","ybase","_writeToCell","endMarker","registerMarker","onDispose","active","_evictOnAlternate","render","range","ydisp","getBg","_extendedAttrs","startTile","startCol","viewportResize","metrics","oldCol","tilesPerRow","hasData","rightCol","_data","lastTile","expandCol","getImageAtBufferCell","extractTileAtBufferCell","room","used","current","old","oldSpec","imgId","DEFAULT_PALETTE","convertLe","_size","sixelPaletteLimit","hook","params","attr","colors","bg","isInverse","isFgDefault","foreground","rgba","isFgRGB","toColorRGB","getFgColor","ansi","isBgDefault","background","isBgRGB","getBgColor","extractActiveBg","_curAttrData","_themeService","sixelSizeLimit","unhook","wasmDecode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","enableSizeReports","sixelSupport","iipSupport","_disposables","_handlers","_defaultOpts","obj","_disposeLater","args","activate","terminal","ImageStorage","windowOps","options","windowOptions","getWinSizePixels","getCellSizePixels","getWinSizeChars","parser","registerCsiHandler","prefix","_decset","_decrst","_da1","_xtermGraphicsAttributes","onRender","intermediates","registerEscHandler","onRequestReset","onBufferChange","onResize","sixelHandler","SixelHandler","_parser","registerDcsHandler","iipHandler","IIPHandler","registerOscHandler","handler","limit","storageUsage","_report","coreService","triggerDataEvent","Array","toFixed","sqrt"],"sourceRoot":""}